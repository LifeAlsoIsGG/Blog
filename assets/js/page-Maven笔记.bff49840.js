(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{926:function(t,a,e){"use strict";e.r(a);var r=e(1),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Tips")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/baizihua/p/11519509.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("maven学习笔记(超详细总结)"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("https://blog.csdn.net/qq_44839652/article/details/107709822")])])]),t._v(" "),e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),e("h3",{attrs:{id:"两大核心"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两大核心"}},[t._v("#")]),t._v(" 两大核心")]),t._v(" "),e("ol",[e("li",[t._v("依赖管理：也就是对jar包的统一管理")]),t._v(" "),e("li",[t._v("项目构建：在项目编码完成后，原先通过IDE对项目进行编译、测试、打包、部署等一些列操作，都可以通过Maven的命令去完成")])]),t._v(" "),e("h2",{attrs:{id:"标准目录结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标准目录结构"}},[t._v("#")]),t._v(" 标准目录结构")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("src")]),t._v("：用于存放项目源码\n"),e("ul",[e("li",[e("strong",[t._v("main")]),t._v("：用于存放运行主要代码\n"),e("ul",[e("li",[e("strong",[t._v("java")]),t._v("：用于存放主体程序源码")]),t._v(" "),e("li",[e("strong",[t._v("resources")]),t._v("：用于存放xml等配置文件的")]),t._v(" "),e("li",[e("strong",[t._v("webapps")]),t._v("：相当于webContent，用于存放WEB-INF、网页页面的素材（html、css、js等）")])])])])]),t._v(" "),e("li",[e("strong",[t._v("test")]),t._v("：用于存放单元测试代码\n"),e("ul",[e("li",[e("strong",[t._v("java")]),t._v("：用于存放测试代码，单元测试类")]),t._v(" "),e("li",[e("strong",[t._v("resources")]),t._v("：用于存放测试用的配置文件(一般少用)")])])]),t._v(" "),e("li",[e("strong",[t._v("target")]),t._v("：用于存放编译好的字节码文件\n"),e("ul",[e("li",[e("strong",[t._v("classes")]),t._v("：用于存放编译好的字节码文件")])])]),t._v(" "),e("li",[e("strong",[t._v("pom.xml")]),t._v("：Project Object Module，Maven核心配置文件")])]),t._v(" "),e("h2",{attrs:{id:"pom-xml文件详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pom-xml文件详解"}},[t._v("#")]),t._v(" pom.xml文件详解")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Tips")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/weixin_38569499/article/details/91456988?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control",target:"_blank",rel:"noopener noreferrer"}},[t._v("pom.xml文件详解"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),e("p",[t._v("格式："),e("code",[t._v("mvn [plugin]:[command]")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("命令")]),t._v(" "),e("th",[t._v("解释")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("mvn -v")]),t._v(" "),e("td",[t._v("查看maven版本")])]),t._v(" "),e("tr",[e("td",[t._v("mvn compile")]),t._v(" "),e("td",[t._v("用来将src/main/java下的文件编译为class文件，并输出到target中。")])]),t._v(" "),e("tr",[e("td",[t._v("mvn package")]),t._v(" "),e("td",[t._v("打包,将项目进行打包，如果是jar打包为jar，war打包为war。")])]),t._v(" "),e("tr",[e("td",[t._v("mvn install")]),t._v(" "),e("td",[t._v("将打包jar/war包到本地仓库中，供其他模块使用")])]),t._v(" "),e("tr",[e("td",[t._v("mvn deploy")]),t._v(" "),e("td",[t._v("将打包jar/war发布到远程仓库")])]),t._v(" "),e("tr",[e("td",[t._v("mvn test")]),t._v(" "),e("td",[t._v("用来将src/main/test下的测试用例进行编译，同时执行一次")])]),t._v(" "),e("tr",[e("td",[t._v("mvn clean")]),t._v(" "),e("td",[t._v("删除编译产生的target文件夹")])]),t._v(" "),e("tr",[e("td",[t._v("mvn site")]),t._v(" "),e("td",[t._v("生成项目相关的网站")])]),t._v(" "),e("tr",[e("td",[t._v("mvn verify")]),t._v(" "),e("td")])])]),t._v(" "),e("h2",{attrs:{id:"参考-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考-2"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("blockquote",[e("ul",[e("li",[e("a",{attrs:{href:"https://blog.csdn.net/cnweike/article/details/52221410?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param",target:"_blank",rel:"noopener noreferrer"}},[t._v("Maven POM中的各种scope的行为总结"),e("OutboundLink")],1)])])]),t._v(" "),e("h2",{attrs:{id:"maven依赖范围"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maven依赖范围"}},[t._v("#")]),t._v(" Maven依赖范围")]),t._v(" "),e("ul",[e("li",[t._v("**compile，**默认值，适用于所有阶段（开发、测试、部署、运行），本jar会一直存在所有阶段。")]),t._v(" "),e("li",[t._v("**provided，**只在开发、测试阶段使用，目的是不让Servlet容器和你本地仓库的jar包冲突 。如servlet.jar。")]),t._v(" "),e("li",[t._v("**runtime，**只在运行时使用，如JDBC驱动，适用运行和测试阶段。")]),t._v(" "),e("li",[t._v("**test，**只在测试时使用，用于编译和运行测试代码。不会随项目发布。")]),t._v(" "),e("li",[t._v("**system，**类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。")])]),t._v(" "),e("h3",{attrs:{id:"compile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compile"}},[t._v("#")]),t._v(" compile")]),t._v(" "),e("p",[t._v("默认的scope。任何定义在compile scope下的依赖将会在所有的class paths下可用。maven工程会将其打包到最终的artifact中。如果你构建一个WAR类型的artifact，那么在compile scope下引用的JAR文件将会被集成到WAR文件内。")]),t._v(" "),e("h3",{attrs:{id:"provided"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#provided"}},[t._v("#")]),t._v(" provided")]),t._v(" "),e("p",[t._v("这个scope假定对应的依赖会由运行这个应用的JDK或者容器来提供。最好的例子就是servlet API。任何在provided scope下定义的依赖在构建时的类路径里是可用的，但是不会被打包到最终的artifact中。如果是一个WAR的文件，servlet API在构建时的类路径里是可用的，但是并不会被打包到WAR文件中。")]),t._v(" "),e("h3",{attrs:{id:"runtime"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#runtime"}},[t._v("#")]),t._v(" runtime")]),t._v(" "),e("p",[t._v("在runtime scope下定义的依赖只会在运行期可用，而在构建期的类路径下不可用。这些依赖将会被打包到最终的artifact中。比如你有一个基于web的应用需要在运行时访问MySQL数据库。你的代码没有任何MySQL数据库驱动的硬依赖。你的代码仅仅是基于JDBC API来编写，在构建期并不需要MySQL数据库驱动。然而，在运行期，就需要相应的驱动来操作MySQL数据库了。因此，这个驱动应该被打包到最终的artifact中。")]),t._v(" "),e("h3",{attrs:{id:"test"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[t._v("#")]),t._v(" test")]),t._v(" "),e("p",[t._v("只用于测试变异的依赖（比如JUnit），execution必须定义在test scope下。这些依赖不会被打包到最终的artifact中。")]),t._v(" "),e("h3",{attrs:{id:"system"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#system"}},[t._v("#")]),t._v(" system")]),t._v(" "),e("p",[t._v("于provided scope很像。唯一的区别在于，在system scope中，你需要告诉Maven如何去找到这个依赖。如果你要引用的依赖在Maven仓库中不存在时，就可以用这个scope。不推荐使用system依赖。")]),t._v(" "),e("h3",{attrs:{id:"import"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#import"}},[t._v("#")]),t._v(" import")]),t._v(" "),e("p",[t._v("从其它的pom文件中导入依赖设置。")]),t._v(" "),e("h2",{attrs:{id:"maven构建多模块项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maven构建多模块项目"}},[t._v("#")]),t._v(" Maven构建多模块项目")]),t._v(" "),e("h3",{attrs:{id:"maven多环境打包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maven多环境打包"}},[t._v("#")]),t._v(" Maven多环境打包")])])}),[],!1,null,null,null);a.default=v.exports}}]);