(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{289:function(t,s,a){t.exports=a.p+"assets/img/Thread_program_process.9b018c04.png"},290:function(t,s,a){t.exports=a.p+"assets/img/Thread_Class_diagram.cb474a11.jpg"},291:function(t,s,a){t.exports=a.p+"assets/img/Thread_life_cycle_state1.bb69a9ce.jpg"},292:function(t,s,a){t.exports=a.p+"assets/img/Thread_life_cycle_state2.0bea1558.jpg"},617:function(t,s,a){t.exports=a.p+"assets/img/serial_Concurrency_Parallel.21d21bd9.jpg"},876:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"进程-线程-任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程-线程-任务"}},[t._v("#")]),t._v(" 进程 | 线程 | 任务")]),t._v(" "),n("p",[n("img",{attrs:{src:a(289),alt:"线程、程序、进程"}})]),t._v(" "),n("h2",{attrs:{id:"线程的创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程的创建"}},[t._v("#")]),t._v(" 线程的创建")]),t._v(" "),n("p",[t._v("Java多线程，皆始于Thread。Thread是多线程的根，每一个线程的开启都始于Thread的"),n("code",[t._v("start()")]),t._v("方法")]),t._v(" "),n("p",[t._v("参考")]),t._v(" "),n("blockquote",[n("ul",[n("li",[t._v("https://www.cnblogs.com/felixzh/p/6036074.html")]),t._v(" "),n("li",[t._v("https://www.jianshu.com/p/7950ea349dbb")])])]),t._v(" "),n("p",[n("img",{attrs:{src:a(290),alt:"线程类图"}})]),t._v(" "),n("p",[t._v("一共有四种")]),t._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[t._v("相关信息")]),t._v(" "),n("p",[n("strong",[t._v("无返回值")]),t._v("，run()返回为void")]),t._v(" "),n("ul",[n("li",[t._v("继承Thread类创建线程（Thread本身就实现Runnable）")]),t._v(" "),n("li",[t._v("实现Runnable接口，并实例作为"),n("code",[t._v("Thread(Runnable r)")]),t._v("构造器的参数")])]),t._v(" "),n("p",[n("strong",[t._v("有返回值")]),t._v("，通过Callable接口，就要实现call方法，这个方法的返回值是Object")]),t._v(" "),n("ul",[n("li",[t._v("实现Callable接口通过FutureTask包装器来创建Thread线程")]),t._v(" "),n("li",[t._v("线程池，使用"),n("strong",[t._v("ExecutorService")]),t._v("、Callable、Future实现有返回结果的多线程")])])]),t._v(" "),n("h3",{attrs:{id:"第一种-继承thread类创建线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一种-继承thread类创建线程"}},[t._v("#")]),t._v(" 第一种：继承Thread类创建线程")]),t._v(" "),n("p",[t._v("​\tThread类本质上是实现了Runnable接口的一个实例，代表一个线程的实例。启动线程的唯一方法就是通过Thread类的start()实例方法。start()方法是一个native方法，它将启动一个新线程，并执行run()方法。这种方式实现多线程很简单，通过自己的类直接extend Thread，并复写run()方法，就可以启动新线程并执行自己定义的run()方法。例如：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n   "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n　　"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n　　 "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyThread.run()"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n　　"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n \n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),t._v(" myThread1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),t._v(" myThread2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nmyThread1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nmyThread2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])]),n("p",[t._v("这种实现方式是显示的继承了Thread，但从类图中我们可以看到，Thread类本身就继承自Runnable，所以继承Thread的本质依然是实现Runnable接口定义的run方法。")]),t._v(" "),n("p",[t._v("需要注意的是继承Thread方式，target对象为null，重写了run方法，导致方式1中的Thread原生的run方法失效，因此并不会调用到target.run()的逻辑，而是直接调用子类重写的run方法。")]),t._v(" "),n("p",[t._v("因为java是单根继承，此方式一般不常用。")]),t._v(" "),n("h3",{attrs:{id:"第二种-实现runnable接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二种-实现runnable接口"}},[t._v("#")]),t._v(" 第二种：实现Runnable接口")]),t._v(" "),n("p",[t._v("实现run方法，接口的实现类的实例作为"),n("strong",[t._v("Thread")]),t._v("的"),n("strong",[t._v("target")]),t._v("作为参数传入带参的"),n("strong",[t._v("Thread")]),t._v("构造函数，通过调用**start()**方法启动线程。适用于已经有继承的父类无法继承Thread类的时候")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadDemo02")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO Auto-generated method stub")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--\x3e我是通过实现接口的线程实现方式！"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br")])]),n("p",[t._v("是较常用且最本质实现。此构造方法相当于对Runnable实例进行一层包装，在"),n("code",[t._v("线程t")]),t._v("启动时，调用Thread的run方法从而间接调用target.run()：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* What will be run. */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])]),n("h3",{attrs:{id:"第三种-实现callable接口通过futuretask包装器来创建thread线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第三种-实现callable接口通过futuretask包装器来创建thread线程"}},[t._v("#")]),t._v(" 第三种：实现Callable接口通过FutureTask包装器来创建Thread线程")]),t._v(" "),n("ul",[n("li",[t._v("创建Callable接口的实现类 ，并实现Call方法")]),t._v(" "),n("li",[t._v("创建Callable实现类的实现，使用FutureTask类包装Callable对象，该FutureTask对象封装了Callable对象的Call方法的返回值")]),t._v(" "),n("li",[t._v("使用FutureTask对象作为Thread对象的target创建并启动线程")]),t._v(" "),n("li",[t._v("调用FutureTask对象的get()来获取子线程执行结束的返回值")])]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoCallable")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Callable")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO Auto-generated method stub")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoCallable")]),t._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoCallable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FutureTask")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FutureTask")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("future"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" future"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//同步获取返回结果")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br")])]),n("p",[t._v("这个方法里，明明没有看到run方法，没有看到Runnable，为什么说本质也是实现Runnable接口呢？")]),t._v(" "),n("p",[t._v("回看开篇的类图，"),n("code",[t._v("FutureTask")]),t._v("实现了"),n("code",[t._v("RunnableFuture")]),t._v("，"),n("code",[t._v("RunnableFuture")]),t._v("则实现了"),n("code",[t._v("Runnable")]),t._v("和"),n("code",[t._v("Future")]),t._v("两个接口。因此构造Thread时，"),n("code",[t._v("FutureTask")]),t._v("还是被转型为"),n("code",[t._v("Runnable")]),t._v("使用。"),n("strong",[t._v("因此其本质还是实现Runnable接口。")])]),t._v(" "),n("h3",{attrs:{id:"第四种-通过线程池创建线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第四种-通过线程池创建线程"}},[t._v("#")]),t._v(" 第四种：通过线程池创建线程")]),t._v(" "),n("p",[t._v("ExecutorService、Callable都是属于Executor框架。返回结果的线程是在JDK1.5中引入的新特征，还有Future接口也是属于这个框架，有了这种特征得到返回值就很方便了。\n通过分析可以知道，他同样也是实现了Callable接口，实现了Call方法，所以有返回值。这也就是正好符合了前面所说的两种分类")]),t._v(" "),n("p",[t._v("执行Callable任务后，可以获取一个Future的对象，在该对象上调用get就可以获取到Callable任务返回的Object了。get方法是阻塞的，即：线程无返回结果，get方法会一直等待。")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadDemo05")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" POOL_NUM "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//线程池数量")]),t._v("\n \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * @param args\n     * @throws InterruptedException \n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO Auto-generated method stub")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" executorService "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("POOL_NUM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RunnableThread")]),t._v(" thread "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RunnableThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Thread.sleep(1000);")]),t._v("\n            executorService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//关闭线程池")]),t._v("\n        executorService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   \n \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RunnableThread")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("     \n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"通过线程池方式创建的线程："')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br")])]),n("h3",{attrs:{id:"继承和组合两种创建方式的不同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#继承和组合两种创建方式的不同"}},[t._v("#")]),t._v(" 继承和组合两种创建方式的不同")]),t._v(" "),n("ol",[n("li",[t._v("继承方式和接口方式，后者属于组合的技术，耦合性更低")]),t._v(" "),n("li",[t._v("后者的一个Runnable实例可以被"),n("code",[t._v("多个线程实例共享")])]),t._v(" "),n("li",[t._v("继承的方式创建线程，Java虚拟机会为其分配调用栈空间、内核线程等资源，成本更加昂贵")])]),t._v(" "),n("h2",{attrs:{id:"线程的启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程的启动"}},[t._v("#")]),t._v(" 线程的启动")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("参考")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://www.jianshu.com/p/8c16aeea7e1a",target:"_blank",rel:"noopener noreferrer"}},[t._v("线程启动原理"),n("OutboundLink")],1)])])]),t._v(" "),n("h3",{attrs:{id:"一些概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一些概念"}},[t._v("#")]),t._v(" 一些概念")]),t._v(" "),n("ul",[n("li",[t._v("Java多线程，皆始于Thread。Thread是多线程的根，每一个线程的开启都始于Thread的start()方法。")]),t._v(" "),n("li",[t._v("start方法调用结束并不意味着相应的线程已经开始运行，"),n("strong",[t._v("运行时间有线程调度器决定")])]),t._v(" "),n("li",[t._v("线程属于“一次性用品”,我们不能通过重新调用一个已经运行结束的线程的"),n("code",[t._v("start")]),t._v("方法来使其重新运行。事实上, start方法也只能够被调用一次,多次调用同一个 Thread实例的start方法会导致其抛出"),n("code",[t._v("IllegalThreadState Exception")]),t._v("异常。")])]),t._v(" "),n("h3",{attrs:{id:"调用start和run方法区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用start和run方法区别"}},[t._v("#")]),t._v(" 调用start和run方法区别")]),t._v(" "),n("p",[t._v("new ⼀个 Thread，线程进⼊了新建状态;调⽤ start() ⽅法，会启动⼀个线程并使线程进⼊了就绪状 态，当分配到时间⽚后就可以开始运⾏了。 start() 会执⾏线程的相应准备⼯作，然后⾃动执⾏ run() ⽅法的内容，这是真正的多线程⼯作。 ⽽直接执⾏ run() ⽅法，会把 run ⽅法当成⼀个 main 主线程下的普通⽅法去执⾏，并不会在某个线程中执⾏它，所以这并不是多线程⼯作。 总结： 调⽤ start ⽅法⽅可启动线程并使线程进⼊就绪状态，⽽ run ⽅法只是 thread 的⼀个普通 ⽅法调⽤，还是在主线程⾥执⾏。")]),t._v(" "),n("h3",{attrs:{id:"thread-start"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#thread-start"}},[t._v("#")]),t._v(" Thread.start()")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * Causes this thread to begin execution; the Java Virtual Machine\n     * calls the <code>run</code> method of this thread.\n     * \n     * 1、start方法将导致this thread开始执行。由JVM调用this thread的run方法。\n     * \n     * The result is that two threads are running concurrently: the\n     * current thread (which returns from the call to the\n     * <code>start</code> method) and the other thread (which executes its\n     * <code>run</code> method).\n     * \n     * 2、结果是 调用start方法的当前线程 和 执行run方法的另一个线程 同时运行。\n     * \n     * It is never legal to start a thread more than once.\n     * In particular, a thread may not be restarted once it has completed\n     * execution.\n     *\n     * 3、多次启动线程永远不合法。 特别是，线程一旦完成执行就不会重新启动。\n     * \n     * @exception  IllegalThreadStateException  if the thread was already started.\n     * 如果线程已启动，则抛出异常。\n     * @see        #run()\n     * @see        #stop()\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\n         * This method is not invoked for the main method thread or "system"\n         * group threads created/set up by the VM. Any new functionality added\n         * to this method in the future may have to also be added to the VM.\n         * \n         * 4、对于由VM创建/设置的main方法线程或“system”组线程，不会调用此方法。 \n         *    未来添加到此方法的任何新功能可能也必须添加到VM中。\n         * \n         * A zero status value corresponds to state "NEW".\n         * 5、status=0 代表是 status 是 "NEW"。\n         */')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("threadStatus "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalThreadStateException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Notify the group that this thread is about to be started\n         * so that it can be added to the group's list of threads\n         * and the group's unstarted count can be decremented. \n         * \n         * 6、通知组该线程即将启动，以便将其添加到线程组的列表中，\n         *    并且减少线程组的未启动线程数递减。\n         * \n         * */")]),t._v("\n        group"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" started "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//7、调用native方法，底层开启异步线程，并调用run方法。")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            started "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("started"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    group"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("threadStartFailed")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" ignore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* do nothing. If start0 threw a Throwable then it will be passed up the call stack \n                 * 8、忽略异常。 如果start0抛出一个Throwable，它将被传递给调用堆栈。\n                 */")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native方法，JVM创建并启动线程，并调用run方法")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br"),n("span",{staticClass:"line-number"},[t._v("54")]),n("br"),n("span",{staticClass:"line-number"},[t._v("55")]),n("br"),n("span",{staticClass:"line-number"},[t._v("56")]),n("br"),n("span",{staticClass:"line-number"},[t._v("57")]),n("br"),n("span",{staticClass:"line-number"},[t._v("58")]),n("br"),n("span",{staticClass:"line-number"},[t._v("59")]),n("br"),n("span",{staticClass:"line-number"},[t._v("60")]),n("br"),n("span",{staticClass:"line-number"},[t._v("61")]),n("br"),n("span",{staticClass:"line-number"},[t._v("62")]),n("br"),n("span",{staticClass:"line-number"},[t._v("63")]),n("br"),n("span",{staticClass:"line-number"},[t._v("64")]),n("br"),n("span",{staticClass:"line-number"},[t._v("65")]),n("br"),n("span",{staticClass:"line-number"},[t._v("66")]),n("br"),n("span",{staticClass:"line-number"},[t._v("67")]),n("br"),n("span",{staticClass:"line-number"},[t._v("68")]),n("br"),n("span",{staticClass:"line-number"},[t._v("69")]),n("br")])]),n("h3",{attrs:{id:"thread-run"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#thread-run"}},[t._v("#")]),t._v(" Thread.run()")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("可见, Thread类的run方法中实现的逻辑是如果 target不为null,那么就调用 target. run0,否则它什么也不做。其中,实例变量 target的类型为 Runnable。如果相应的线程实例是通过构造器 Thread( Runnable target)创建的,那么 target的值为构造器中的参数值,否则 target的值为null。因此, Thread类所实现的任务处理逻辑是要么什么也不做( target为nul),\n要么直接执行 target所引用的 Runnable实例所实现的任务处理逻辑。")]),t._v(" "),n("p",[t._v("Thread类的run方法的这种处理逻辑决定了创建线程的两种方式:")]),t._v(" "),n("ul",[n("li",[t._v("一种是在 Thread子类的run方法中直接实现任务处理逻辑")]),t._v(" "),n("li",[t._v("另一种是在一个 Runnable实例中实现任务处理逻辑,该逻辑由 Thread类的run方法负责调用。")])]),t._v(" "),n("h2",{attrs:{id:"线程的属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程的属性"}},[t._v("#")]),t._v(" 线程的属性")]),t._v(" "),n("p",[t._v("线程的属性包括线程的")]),t._v(" "),n("ul",[n("li",[t._v("编号(Id)：不可读写")]),t._v(" "),n("li",[t._v("名称(Name)：可读写")]),t._v(" "),n("li",[t._v("线程类别(Daemon)：可读写")]),t._v(" "),n("li",[t._v("优先级(Priority)：可读写")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("属性")]),t._v(" "),n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("用途")]),t._v(" "),n("th",[t._v("只读")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("编号(ID)")]),t._v(" "),n("td",[t._v("long")]),t._v(" "),n("td",[t._v("用于标识不同的线程，不同的线程拥有 不同的编号")]),t._v(" "),n("td",[t._v("是")]),t._v(" "),n("td",[t._v("某个编号的线程运行结束后，该编号可能被后续创建的线程使用。不同线程  拥有的编号虽然不同，但是这种编号的唯一性只在Java虚拟机的一次运行有  效。也就是说重启个Java虚拟机(如重启Web服务器)后，某些线程的编号可能 与上次Java虚拟机运行的某个线程的编号一样，因此该属性的值不适合用作  某种唯一标识，特别是作为数据库中的唯一标识(如主键)")])]),t._v(" "),n("tr",[n("td",[t._v("名称    (Name)")]),t._v(" "),n("td",[t._v("String")]),t._v(" "),n("td",[t._v("用于区分不同的线程，默认值与线程的 编号有关，默认值的格式为:“Thread-  线程编号”，如“Thread-0”")]),t._v(" "),n("td",[t._v("否")]),t._v(" "),n("td",[t._v("Java并不禁止我们将不同的线程的名称属性设置为相同的值，尽管如此，设 置线程的名称属性有助于代码调试和问题定位")])]),t._v(" "),n("tr",[n("td",[t._v("线程类别  (Daemon)")]),t._v(" "),n("td",[t._v("boolean")]),t._v(" "),n("td",[t._v("值为tnue表示相应的线程为守护线程， 否则表示相应的线程为用户线程。该属 性的默认值与相应线程的父线程的该属 性的值相同")]),t._v(" "),n("td",[t._v("否")]),t._v(" "),n("td",[t._v("该属性必须在相应线程启动之前设置，即对setDaemon方法的调用必须在对  start方法的调用之前，否则setDaemon方法会抛出             IllegalThreadStateException异常。负责一些关键任务处理的线程不适宜设 置为守护线程")])]),t._v(" "),n("tr",[n("td",[t._v("优化级   (Priority)")]),t._v(" "),n("td",[t._v("int")]),t._v(" "),n("td",[t._v("该属性本质上是给线程调度器的提示， 用于表示应用程序希望哪个线程能够优 先得以运行。Java定义了1~10的10个优 先级，默认值一般为5(表示普通优先级 )。对于具体的一个线程而言，其优先  级的默认值与其父线程(创建该线程的  线程)的优先级值相等。")]),t._v(" "),n("td",[t._v("否")]),t._v(" "),n("td",[t._v("一般使用默认优先级即可，不恰当地设置该属性值可能导致严重的问题(线程饥饿)")])])])]),t._v(" "),n("h3",{attrs:{id:"优先级的设定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优先级的设定"}},[t._v("#")]),t._v(" 优先级的设定")]),t._v(" "),n("p",[t._v("​\tJava线程的优先级属性本质上只是一个给线程调度器的提示信息，以便于线程调度器决定优先调度哪些线程运行。 它并不能保证线程按照其优先级高低的顺序运行。另外，Java线程的优先级使用不当或者滥用则可能导致某些线程永远无法得到运行， 即产生了"),n("code",[t._v("线程饥钱(Thread Starvation)")]),t._v("。")]),t._v(" "),n("p",[t._v("因此，线程的优先级并不是设置得越高越好； 一般情况下使用普通优先级即可，即不必设置线程的优先级属性。")]),t._v(" "),n("h3",{attrs:{id:"守护线程和用户线程-非守护线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#守护线程和用户线程-非守护线程"}},[t._v("#")]),t._v(" 守护线程和用户线程（非守护线程）")]),t._v(" "),n("p",[t._v("​\t按照线程是否会阻止Java虚拟机正常停止,我们可以将Java中的线程分为守护线程( Daemon Thread)和用户线程( User Thread,也称非守护线程)。")]),t._v(" "),n("p",[t._v("线程的 daemon属性用于表示相应线程是否为守护线程。用户线程会阻止Java虚拟机的正常停止,即一个Java虚拟机只有在其所有用户线程都运行结束(即 Thread runo调用未结束)的情况下才能正常停止。而守护线程则不会影响Java虚拟机的正常停止,即应用程序中有守护线程在运行也不影响Java虚拟机的正常停止。")]),t._v(" "),n("p",[t._v("因此,守护线程通常用于执行一些重要性不是很高的任务,例如用于监视其他线程的运行情况。")]),t._v(" "),n("p",[t._v("如果Java虚拟机是被强制停止的,比如在 Linux系统下使用kill命令强制终止一个Java虚拟机进程,那么即使是用户线程也无法阻止Java虚拟机的停止。")]),t._v(" "),n("h2",{attrs:{id:"线程的常用方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程的常用方法"}},[t._v("#")]),t._v(" 线程的常用方法")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("方法")]),t._v(" "),n("th",[t._v("功能")]),t._v(" "),n("th",[t._v("备注")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("static Thread    currentThread()")]),t._v(" "),n("td",[t._v("返回当前线程，即当前代码的执行线程(对象)")]),t._v(" "),n("td",[t._v("同一段代码在不同时刻对Thread.currentThread的调用,其返回值可能不同")])]),t._v(" "),n("tr",[n("td",[t._v("void run()")]),t._v(" "),n("td",[t._v("线程的任务处理逻辑")]),t._v(" "),n("td",[t._v("该方法是由Java虚拟机直接调用的，一般情况下应用程序不应该调用该方法")])]),t._v(" "),n("tr",[n("td",[t._v("void start()")]),t._v(" "),n("td",[t._v("启动线程")]),t._v(" "),n("td",[t._v("该方法的返回并不代表相应的线程已经被启动；一个Thread实例的start方法  只能够被调用一次，多次调用会抛出异常")])]),t._v(" "),n("tr",[n("td",[t._v("void join()")]),t._v(" "),n("td",[t._v("等待线程运行结束")]),t._v(" "),n("td",[t._v("线程A调用线程B的join方法，那么线程A的运行会被暂停，直到线程B运行结束")])]),t._v(" "),n("tr",[n("td",[t._v("static void     yield()")]),t._v(" "),n("td",[t._v("使当前线程主动放弃其对处理器的占用，这可 能导致当前线程被暂停")]),t._v(" "),n("td",[t._v("这个方法是不可靠的，该方法被调用时当前线程可能仍然继续运行(视系统当  前的运行状况而定)  。会使线程为READY状态")])]),t._v(" "),n("tr",[n("td",[t._v("static void     sleep(long millis)")]),t._v(" "),n("td",[t._v("使当前线程休眠(暂停运行)指定的时间")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("isAlive()")]),t._v(" "),n("td",[t._v("判断线程是否处于活动状态")]),t._v(" "),n("td",[t._v("线程调用start后，即处于活动状态")])]),t._v(" "),n("tr",[n("td",[t._v("interrupt()")]),t._v(" "),n("td",[t._v("中断线程")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("wait()")]),t._v(" "),n("td",[t._v("导致线程等待，进入堵塞状态。")]),t._v(" "),n("td",[t._v("该方法要在同步方法或者同步代码块中才使用的")])]),t._v(" "),n("tr",[n("td",[t._v("notify()")]),t._v(" "),n("td",[t._v("唤醒当前线程，进入运行状态")]),t._v(" "),n("td",[t._v("该方法要在同步方法或者同步代码块中才使用的")])]),t._v(" "),n("tr",[n("td",[t._v("notifyAll()")]),t._v(" "),n("td",[t._v("唤醒所有等待的线程。")]),t._v(" "),n("td",[t._v("该方法要在同步方法或者同步代码块中才使用的")])])])]),t._v(" "),n("h2",{attrs:{id:"线程的层次关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程的层次关系"}},[t._v("#")]),t._v(" 线程的层次关系")]),t._v(" "),n("h3",{attrs:{id:"父线程与子线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#父线程与子线程"}},[t._v("#")]),t._v(" 父线程与子线程")]),t._v(" "),n("p",[t._v("Java平台中的线程不是孤立的，线程与线程之间总是存在一些联系。假设线程A所执行的代码创建了线程B， 那么，习惯上我们称线程B为线程A的子线程，相应地线程A就被称为线程B的父线程。不过Java平台中并没有API用于获取一个线程的父线程， 或者获取一个线程的所有子线程。")]),t._v(" "),n("h3",{attrs:{id:"父子线程的daemon值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#父子线程的daemon值"}},[t._v("#")]),t._v(" 父子线程的Daemon值")]),t._v(" "),n("p",[t._v("默认情况下，父线程是守护线程，则子线程也是守护线程，父线程是用户线程，则子线程也是用户线程。 另外，父线程在创建子线程后启动子线程之前可以调用该线程的"),n("code",[t._v("setDaemon")]),t._v("方法，将相应的线程设置为守护线程(或者用户线程)。")]),t._v(" "),n("h3",{attrs:{id:"父子线程的优先级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#父子线程的优先级"}},[t._v("#")]),t._v(" 父子线程的优先级")]),t._v(" "),n("p",[t._v("一个线程的优先级默认值为该线程的父线程的优先级，即如果我们没有设置或者更改一个线程的优先级， 那么这个线程的优先级的值与父线程的优先级的值相等。")]),t._v(" "),n("h3",{attrs:{id:"父子线程的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#父子线程的生命周期"}},[t._v("#")]),t._v(" 父子线程的生命周期")]),t._v(" "),n("p",[t._v("父线程和子线程之间的生命周期也没有必然的联系。比如父线程运行结束后，子线程可以继续运行， 子线程运行结束也不妨碍其父线程继续运行。")]),t._v(" "),n("h3",{attrs:{id:"工作者线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作者线程"}},[t._v("#")]),t._v(" 工作者线程")]),t._v(" "),n("p",[t._v("习惯上，我们也称某些子线程为エ作者线程(Worker Thread)或者后台线程(Background Thread)。 工作者线程通常是其父线程创建来用于专门负责某项特定任务的执行的。 例如，Java虚拟机中对内存进行回收的线程通常被称为GC工作者线程。")]),t._v(" "),n("h2",{attrs:{id:"线程的生命周期状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程的生命周期状态"}},[t._v("#")]),t._v(" 线程的生命周期状态")]),t._v(" "),n("p",[t._v("Java 线程在运⾏的⽣命周期中的指定时刻只可能处于下⾯ 6 种不同状态的其中⼀个状态（图源《Java 并发编程艺术》4.1.4 节）。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(291),alt:"线程生命周期状态"}})]),t._v(" "),n("p",[t._v("线程在⽣命周期中并不是固定处于某⼀个状态⽽是随着代码的执⾏在不同状态之间切换。Java 线程状 态变迁如下图所示（图源《Java 并发编程艺术》4.1.4 节）：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(292),alt:"线程生命周期状态2"}})]),t._v(" "),n("p",[t._v("由上图可以看出：线程创建之后它将处于 "),n("strong",[t._v("NEW（新建） 状态")]),t._v("，"),n("strong",[t._v("调⽤ start() ⽅法后开始运⾏")]),t._v("，线程 这时候处于 "),n("strong",[t._v("READY（可运⾏） 状态")]),t._v("。可运⾏状态的线程获得了 **CPU 时间⽚（timeslice）**后就处于 "),n("strong",[t._v("RUNNING（运⾏）")]),t._v(" 状态。")]),t._v(" "),n("h3",{attrs:{id:"new"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#new"}},[t._v("#")]),t._v(" NEW")]),t._v(" "),n("p",[t._v("一个已创建而未启动的线程处于该状态。由于一个线程实例只能够被启动次，因此一个线程只可能有一次处于该状态。")]),t._v(" "),n("h3",{attrs:{id:"runnable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#runnable"}},[t._v("#")]),t._v(" RUNNABLE")]),t._v(" "),n("p",[t._v("该状态可以被看成一个复合状态，它包括两个子状态："),n("code",[t._v("READY")]),t._v("和"),n("code",[t._v("RUNNING")]),t._v("。 前者表示处于该状态的线程可以被"),n("code",[t._v("线程调度器(Scheduler)")]),t._v("进行调度而使之处于"),n("code",[t._v("RUNNING")]),t._v("状态； 后者表示处于该状态的线程正在运行，即相应线程对象的run方法所对应的指令正在由处理器执行。 执行"),n("code",[t._v("Thread.yield()")]),t._v("的线程，其状态可能会由"),n("code",[t._v("RUNNING")]),t._v("转换为"),n("code",[t._v("READY")]),t._v("。处于"),n("code",[t._v("READY")]),t._v("子状态的线程也被称为活跃线程。")]),t._v(" "),n("h3",{attrs:{id:"blocked"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#blocked"}},[t._v("#")]),t._v(" BLOCKED")]),t._v(" "),n("p",[t._v("一个线程发起一个阻塞式I/O(Blocking I/O)操作后，或者申请一个由其他线程持有的独占资源(比如锁)时，相应的线程会处于该状态， 处于Blocked状态的线程并不会占用处理器资源。当阻塞式1O操作完成后，或者线程获得了其申请的资源， 该线程的状态又可以转换为RUNNABLE。")]),t._v(" "),n("h3",{attrs:{id:"waiting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#waiting"}},[t._v("#")]),t._v(" WAITING")]),t._v(" "),n("p",[t._v("一个线程执行了某些特定方法之后，就会处于这种等待其他线程执行另外一些特定操作的状态。 能够使其"),n("code",[t._v("执行线程")]),t._v("变更为WAITING状态的方法包括：Object.wait()、Thread.join()和LockSupport.park(Object)。 能够使相应线程从WAITING变更为RUNNABLE的对应方法包括：Object.notify()、notifyAll()和LockSupport.unpark(Objec)")]),t._v(" "),n("h3",{attrs:{id:"timed-waiting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#timed-waiting"}},[t._v("#")]),t._v(" TIMED WAITING")]),t._v(" "),n("p",[t._v("该状态和WAITING类似，差别在于处于该状态的线程并非无限制地等待其他线程执行特定操作，而是处于带有时间限制的等待状态。 当其他线程没有在指定时间内执行该线程所期望的特定操作时，该线程的状态自动转换为RUNNABLE。")]),t._v(" "),n("h3",{attrs:{id:"terminated"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#terminated"}},[t._v("#")]),t._v(" TERMINATED")]),t._v(" "),n("p",[t._v("已经执行结束的线程处于该状态。由于一个线程实例只能够被启动一次，因此一个线程也只可能有一次处于该状态。 Thread.run()正常返回或者由于抛出异常而提前终止都会导致相应线程处于该状态。")]),t._v(" "),n("p",[t._v("当线程执⾏ wait() ⽅法之后，线程进⼊ WAITING（等待） 状态。进⼊等待状态的线程需要依靠其他 线程的通知才能够返回到运⾏状态，⽽ TIME_WAITING(超时等待) 状态相当于在等待状态的基础上增加 了超时限制，⽐如通过 sleep（long millis） ⽅法或 wait（long millis） ⽅法可以将 Java 线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。当线程调 ⽤同步⽅法时，在没有获取到锁的情况下，线程将会进⼊到 BLOCKED（阻塞） 状态。线程在执⾏ Runnable 的 run() ⽅法之后将会进⼊到 TERMINATED（终⽌） 状态。")]),t._v(" "),n("h2",{attrs:{id:"多线程编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多线程编程"}},[t._v("#")]),t._v(" 多线程编程")]),t._v(" "),n("h3",{attrs:{id:"好处坏处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#好处坏处"}},[t._v("#")]),t._v(" 好处坏处")]),t._v(" "),n("p",[t._v("好处")]),t._v(" "),n("ol",[n("li",[t._v("提高系统的吞吐率")]),t._v(" "),n("li",[t._v("提高响应性")]),t._v(" "),n("li",[t._v("充分利用多核处理器资源")]),t._v(" "),n("li",[t._v("最小化对系统资源的使用")]),t._v(" "),n("li",[t._v("简化程序的结构")])]),t._v(" "),n("p",[t._v("坏处")]),t._v(" "),n("ol",[n("li",[t._v("线程安全")]),t._v(" "),n("li",[t._v("线程活性\n"),n("ol",[n("li",[t._v("死锁")]),t._v(" "),n("li",[t._v("活锁：一个线程一直在尝试某个操作但就是没有进展")])])]),t._v(" "),n("li",[t._v("上下文切换\n"),n("ol",[n("li",[t._v("这是属于额外的资源消耗")])])]),t._v(" "),n("li",[t._v("可靠性")])]),t._v(" "),n("h2",{attrs:{id:"串行-并发-并行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#串行-并发-并行"}},[t._v("#")]),t._v(" 串行 | 并发 | 并行")]),t._v(" "),n("p",[n("img",{attrs:{src:a(617),alt:"串行,并发和并行"}})]),t._v(" "),n("h3",{attrs:{id:"串行-sequential"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#串行-sequential"}},[t._v("#")]),t._v(" 串行(Sequential)")]),t._v(" "),n("p",[t._v("先开始做事情A，待其完成之后再开始做事情B，依次类推，直到事情C完成。这实际上顺序逐一完成几件事情，只需要投入一个人。 在这种方式下3件事情总共耗时35(15+10+10)分钟。")]),t._v(" "),n("h3",{attrs:{id:"并发-concurrent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并发-concurrent"}},[t._v("#")]),t._v(" 并发(Concurrent)")]),t._v(" "),n("p",[t._v("这种方式也可以只投入一个人，这个人先开始做事情A，事情A的准备活动做好后(此时消耗了5分钟)， 在等待事情A完成的这段时间内他开始做事情B，为事情B的准备活动花了2分钟之后，在等待事情B完成的这段时间内他开始做事情C， 直到10分钟之后事情C完成。这整个过程实际上是以交替的方式利用等待某件事情完成的时间来做其他事情， 在这种方式下3件事情总共耗时17(5+2+10)分钟，这比串行方式节约了一半多的时间。")]),t._v(" "),n("h3",{attrs:{id:"并行-parallel"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并行-parallel"}},[t._v("#")]),t._v(" 并行(Parallel)")]),t._v(" "),n("p",[t._v("这种方式需要投入3个人，每个人负责完成其中一件事情，这3个人在同一时刻开始齐头并进地完成这些事情。 在这种方式下3件事情总共耗时15分钟(取决于耗时最长的那件事情所需的时间)，比并发的方式节约了2分钟的时间。")]),t._v(" "),n("h2",{attrs:{id:"竞态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#竞态"}},[t._v("#")]),t._v(" 竞态")]),t._v(" "),n("p",[t._v("竞态是指"),n("code",[t._v("计算的正确性")]),t._v("依赖于"),n("code",[t._v("相对时间顺序")]),t._v("或者"),n("code",[t._v("线程的交错")]),t._v("。竞态往往伴随着读取脏数据问题(即读取到一个过时的数据)， 以及丢失更新问题(即一个线程对数据所做的更新没有体现在后续其他线程对该数据的读取上)。")]),t._v(" "),n("blockquote",[n("p",[t._v("竞态不一定就导致计算结果的不正确,它只是不排除计算结果时而正确时而错误的可能。")])]),t._v(" "),n("h3",{attrs:{id:"举例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IndexGen")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextIndex")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" index"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IndexGen")]),t._v(" indexGen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IndexGen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" visited "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" threads "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            threads"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" visited"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("indexGen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextIndex")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        threads"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" threads"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d\\t"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" visited"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br")])]),n("p",[t._v("参考上述程序，我们创建一百个线程，每次通过IndexGen获取下一个index，并将其访问次数加一。我们期望的结果是每个index都只被访问一次， 但多次运行后，却发现可能出现下面的结果，其中，0,62,85被访问了两次，导致97,98,99未被访问：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("2\t1\t1\t1\t1\t1\t1\t1\t1\t1\t\n1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t\n1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t\n1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t\n1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t\n1\t1\t2\t1\t1\t1\t1\t1\t1\t1\t\n1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t\n1\t1\t1\t1\t1\t2\t1\t1\t1\t1\t\n1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t\n1\t1\t1\t1\t1\t1\t1\t0\t0\t0\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("p",[t._v("上述例子中，依照nextIndex()方法实现的逻辑，下标总是递增的，因此不同的线程它们所“拿到”的index也不应该相同才对。 但从结果来看，不同线程却“拿到”了重复的index，即nextIndex()所返回的下标值重复了。且如果我们多次重复运行代码，所得到的结果也不完全相同。")]),t._v(" "),n("p",[n("strong",[t._v("这个现象说明，当多个线程在没有采取任何控制措施的情况下并发地更新、读取同一个共享变量时，是不安全的，可能出现意料之外的结果。")])]),t._v(" "),n("h3",{attrs:{id:"原因"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[t._v("#")]),t._v(" 原因")]),t._v(" "),n("p",[t._v("上述例子中的 "),n("code",[t._v("index++")]),t._v(" 看起来像是一个操作，实际上相当于如下3个指令：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("r1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指令①:将变量index的值从内存读到寄存器r1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("increment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指令②:将寄存器r1的值增加1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("store")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("r1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("指令③"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("将奇存器r1的内容写入变量index所对应的内存空间\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}}),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("thread-0")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("thread-1")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("thread-2")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("t1")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("未运行")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("执行其他操作")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("执行其他操作")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("t2")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("执行其他操作")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("[index=0]执行指令①")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("[index=0]执行指令①")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("t3")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("执行其他操作")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("[r1=0]执行指令②")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("[r1=0]执行指令②")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("t4")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("[index=0]执行指令①")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("[r1=1][index=0]执行指令③")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("[r1=1][index=0]执行指令③")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("t5")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("[r1=0]执行指令②")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("[index=1]执行其他操作")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("[index=1]执行其他操作")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("t6")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("[r1=1][index=0]执行指令③")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("运行结束")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("运行结束")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("t7")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("[index=1]执行其他操作")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("运行结束")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("运行结束")])])])]),t._v(" "),n("h3",{attrs:{id:"竞态的模式-条件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#竞态的模式-条件"}},[t._v("#")]),t._v(" 竞态的模式/条件")]),t._v(" "),n("p",[t._v("从上述竞态典型实例中我们可以提炼出竞态的两种模式")]),t._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[t._v("相关信息")]),t._v(" "),n("ul",[n("li",[t._v("read-modify-write(读-改-写)：读取个共享变量的值(read)，然后根据该值做一些计算(modify)，接着更新该共享变量的值(write)")]),t._v(" "),n("li",[t._v("check-then-act(检测-执行)：读取(read)某个共享变量的值，根据该变量的值(如if语句)决定下一步的动作(act)是什么。")])])]),t._v(" "),n("p",[t._v("从上述分析中我们可以总结出竞态产生的一般条件。设O1和O2是并发访问共享变量V的两个操作,这两个操作并非都是读操作。如果一个线程在执行O1期间(开始执行而未执行结束)另外一个线程正在执行O2,"),n("strong",[t._v("那么无论O2是在读取还是更新V都会导致竞态")]),t._v("。")]),t._v(" "),n("p",[t._v("从这个角度来看,竞态可以被看作访问(读取、更新)同一组共享变量的多个线程所执行的操作相互交错( Interleave),此如一个线程读取共享变量并以该共享变量为基础进行计算")]),t._v(" "),n("blockquote",[n("p",[t._v("对于局部变量，是线程私有，不会产生竞态")])]),t._v(" "),n("h2",{attrs:{id:"线程安全性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程安全性"}},[t._v("#")]),t._v(" 线程安全性")]),t._v(" "),n("h3",{attrs:{id:"定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),n("p",[t._v("一般而言，如果一个类在单线程环境下能够运作正常，并且在多线程环境下，如果使用方不必做任何改变的情况下也能运作正常， 那么我们就称其是线程安全的，相应地我们称这个类具有线程安全性。")]),t._v(" "),n("p",[t._v("线程安全问题包括三个方面")]),t._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[t._v("相关信息")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("原⼦性")]),t._v(" : ⼀个的操作或者多次操作，要么所有的操作全部都得到执⾏并且不会收到任何因素的 ⼲扰⽽中断，要么所有的操作都执⾏，要么都不执⾏。 "),n("strong",[t._v("synchronized 可以保证代码⽚段的原⼦性。")])]),t._v(" "),n("li",[n("strong",[t._v("可⻅性")]),t._v(" ：当⼀个变量对共享变量进⾏了修改，那么另外的线程都是⽴即可以看到修改后的最新 值。 "),n("strong",[t._v("volatile 关键字可以保证共享变量的可⻅性。")])]),t._v(" "),n("li",[n("strong",[t._v("有序性")]),t._v(" ：代码在执⾏的过程中的先后顺序，Java 在编译器以及运⾏期间的优化，代码的执⾏顺序未必就是编写代码时候的顺序。 "),n("strong",[t._v("volatile 关键字可以禁⽌指令进⾏重排序优化。")])])])]),t._v(" "),n("h3",{attrs:{id:"三大特性-原子性-automicity"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三大特性-原子性-automicity"}},[t._v("#")]),t._v(" 三大特性：原子性（Automicity）")]),t._v(" "),n("p",[t._v("原子的字面意思是不可分割的。对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的， 那么该操作就是原子操作，相应地我们称该操作具有原子性。")]),t._v(" "),n("p",[t._v("许多资料都会提及原子操作的定义中的“不可分割”,但是很少有资料会对其含义做 进一步的解释。而弄清楚“不可分割”的具体含义是理解原子性的关键所在。所谓“不可 分割”,其中一个含义是指访问(读、写)某个共享变量的操作从其执行线程以外的任何 线程来看,该操作要么"),n("code",[t._v("已经执行结束")]),t._v("要么"),n("code",[t._v("尚未发生")]),t._v(",即其他线程不会“看到”该操作执行 了部分的中间效果。")]),t._v(" "),n("blockquote",[n("p",[t._v("原子性只有在操作"),n("code",[t._v("共享变量")]),t._v("或"),n("code",[t._v("多线程")]),t._v("的情况下才有意义")])]),t._v(" "),n("h4",{attrs:{id:"实现方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现方式"}},[t._v("#")]),t._v(" 实现方式")]),t._v(" "),n("p",[t._v("总的来说，Java中有两种方式来实现原子性："),n("code",[t._v("锁(Lock)")]),t._v("和"),n("code",[t._v("CAS(Compare-And-Swap)")]),t._v("指令。")]),t._v(" "),n("p",[n("strong",[t._v("锁（Lock）")])]),t._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[t._v("相关信息")]),t._v(" "),n("p",[t._v("锁具有"),n("code",[t._v("排他性")]),t._v("，即它能够保障一个共享变量在任意一个时刻只能够被一个线程访问， 这就排除了多个线程在同一时刻访问同一个共享变量而导致干扰与冲突的可能，即消除了竞态。")])]),t._v(" "),n("p",[n("strong",[t._v("CAS")])]),t._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[t._v("相关信息")]),t._v(" "),n("p",[t._v("CAS指令实现原子性的方式与锁实现原子性的方式实质上是相同的，差别在于"),n("code",[t._v("锁")]),t._v("通常是在"),n("code",[t._v("软件")]),t._v("这一层次实现的， 而"),n("code",[t._v("CAS")]),t._v("是直接在"),n("code",[t._v("硬件（处理器和内存）")]),t._v("这一层次实现的，它可以被看作"),n("code",[t._v("“硬件锁”")]),t._v("。")])]),t._v(" "),n("h4",{attrs:{id:"基本数据类型原子性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型原子性"}},[t._v("#")]),t._v(" 基本数据类型原子性")]),t._v(" "),n("p",[t._v("在Java语言中，"),n("code",[t._v("long")]),t._v("型和"),n("code",[t._v("double")]),t._v("型以外的任何类型的变量的写操作都是原子操作，包括：byte、boolean、short、char、foat、int和引用型变量，long和double的读写是"),n("code",[t._v("分开两个32位操作")]),t._v("的，不保证原子性，")]),t._v(" "),n("p",[t._v("对long/double型变量的写操作由于Java语言规范并不保障其具有原子性，因此在多个线程并发访问同一long/double型变量的情况下， 一个线程可能会读取到其他线程更新该变量的“中间结果”。这是因为Java中的long/double型变量会占用64位的存储空间， 而32位的Java虚拟机对这种变量的写操作可能会被分解为两个步骤来实施，比如先写低32位，再写高32位。 那么，在多个线程试图共享同一个这样的变量时就可能出现一个线程在写高32位的时候，另外一个线程正在写低32位的情形。")]),t._v(" "),n("h3",{attrs:{id:"三大特性-可见性-visibility"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三大特性-可见性-visibility"}},[t._v("#")]),t._v(" 三大特性：可见性（Visibility）")]),t._v(" "),n("p",[t._v("在多线程环境下，一个线程对某个共享变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果， 甚至永远也无法读取到这个更新的结果。")]),t._v(" "),n("p",[t._v("如果一个线程对某个共享变量进行更新之后，后续访问该变量的线程可以读取到该更新的结果， 那么我们就称这个线程对该共享变量的更新对其他线程可见，否则我们就称这个线程对该共享变量的更新对其他线程不可见。")]),t._v(" "),n("p",[t._v("多线程程序在可见性方面存在问题意味着某些线程读取到了旧数据(Stale Data)，而这可能导致程序出现我们所不期望的结果。")]),t._v(" "),n("h4",{attrs:{id:"寄存器和高速缓存带导致的不可见"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#寄存器和高速缓存带导致的不可见"}},[t._v("#")]),t._v(" 寄存器和高速缓存带导致的不可见")]),t._v(" "),n("p",[t._v("程序中的变量可能会被分配到"),n("code",[t._v("寄存器(Register)")]),t._v("而不是"),n("code",[t._v("主内存")]),t._v("中进行存储，每个"),n("code",[t._v("处理器")]),t._v("都有其自己的"),n("code",[t._v("寄存器")]),t._v("， 而一个"),n("code",[t._v("处理器")]),t._v("无法读取另外一个"),n("code",[t._v("处理器")]),t._v("上的"),n("code",[t._v("寄存器")]),t._v("中的内容。因此，如果"),n("code",[t._v("两个线程")]),t._v("分别运行在不同的"),n("code",[t._v("处理器")]),t._v("上， 且这两个线程所共享的变量却被分配到寄存器上进行存储，那么可见性问题就会产生。")]),t._v(" "),n("p",[t._v("另外，即便某个"),n("code",[t._v("共享变量")]),t._v("是被分配到"),n("code",[t._v("主内存")]),t._v("中进行存储的，也不能保证该变量的可见性。这是因为处理器对主内存的访问"),n("code",[t._v("并不是直接访问")]),t._v("， 而是通过其"),n("code",[t._v("高速缓存（cache）子系统")]),t._v("进行的。一个处理器上运行的线程对变量的更新可能只是更新到该处理器的"),n("code",[t._v("写缓冲器")]),t._v("中，还没有到达该处理器的"),n("code",[t._v("高速缓存")]),t._v("中， 更不用说到"),n("code",[t._v("主内存")]),t._v("中了。而一个处理器的"),n("code",[t._v("写缓冲器")]),t._v("中的内容无法被另外一个"),n("code",[t._v("处理器")]),t._v("读取， 因此运行在另外一个处理器上的线程无法看到这个线程对某个共享变量的更新。及时通知了，其他处理器可能仅仅将该更新加入到"),n("code",[t._v("无效化队列")]),t._v("中去")]),t._v(" "),n("blockquote",[n("p",[t._v("处理器并不是直接与主内存(RAM)打交道而执行内存的读、写操作,而是通过 寄存器( Register)、高速缓存( Cache)写缓冲器( Store Buffer,也称 Write Buffer) 和无效化队列( Invalidate Queue)等部件执行内存的读、写操作的。从这个角度来看, 这些部件相当于主内存的副本,因此本书为了叙述方便将这些部件统称为处理器对主 内存的缓存,简称处理器缓存。")])]),t._v(" "),n("p",[n("strong",[t._v("解决方案")])]),t._v(" "),n("p",[n("code",[t._v("缓存一致性协议(Cache Coherence Protocol)")])]),t._v(" "),n("p",[t._v("通过缓存一致性协议可以让一个处理器来读取其他处理器的"),n("code",[t._v("高速缓存")]),t._v("中的数据，并将读到的数据更新到该处理器的"),n("code",[t._v("高速缓存")]),t._v("中。这种一个处理器从其自身处理器缓存以外的其他存储部件中读取数据， 并将其更新到该处理器的高速缓存的过程，我们称之为"),n("code",[t._v("缓存同步")]),t._v("。相应地，我们称这些存储部件的内容是可同步的， 可同步的存储部件包括处理器的高速缓存、主内存。")]),t._v(" "),n("p",[n("code",[t._v("冲刷处理器缓存")]),t._v("（更新后）")]),t._v(" "),n("p",[t._v("为了保障可见性，我们必须使一个"),n("code",[t._v("处理器")]),t._v("对"),n("code",[t._v("共享变量")]),t._v("所做的更新最终被写入该处理器的高速缓存或者主内存中,而不是始终停留在其写缓冲器中，这个过程被称为"),n("code",[t._v("冲刷处理器缓存")]),t._v("。")]),t._v(" "),n("p",[n("code",[t._v("刷新处理器缓存")]),t._v("（读取时）")]),t._v(" "),n("p",[t._v("同样，为了保障可见性，一个"),n("code",[t._v("处理器")]),t._v("在读取"),n("code",[t._v("共享变量")]),t._v("的时候，如果其他处理器在此之前已经更新了该变量，那么该处理器必须从其他处理器的高速缓存或者主内存中，对相应的变量进行"),n("code",[t._v("缓存同步")]),t._v("，这个过程被称为"),n("code",[t._v("刷新处理器缓存")]),t._v("。")]),t._v(" "),n("h4",{attrs:{id:"jit优化导致的不可见"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jit优化导致的不可见"}},[t._v("#")]),t._v(" JIT优化导致的不可见")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**volatile**/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" isCanceled "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isCanceled"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// System.out.println("hello");')]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"come here"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        isCanceled "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br")])]),n("p",[t._v("JIT为了优化避免重复读取"),n("code",[t._v("Canceled")]),t._v("的值，会将代码优化为与如下代码等效果的机器码：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isCanceled"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// System.out.println("hello");')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("h4",{attrs:{id:"作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),n("p",[n("code",[t._v("volatile")]),t._v("该关键字所起到的一个作用就是提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JT编译器做出可能导致程序运行"),n("code",[t._v("不正常的优化")]),t._v("；另外一个作用就是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作， 写个 volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障了可见性。")]),t._v(" "),n("h4",{attrs:{id:"jvm的可见性保证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jvm的可见性保证"}},[t._v("#")]),t._v(" JVM的可见性保证")]),t._v(" "),n("ul",[n("li",[t._v("Java语言规范保证，父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的")]),t._v(" "),n("li",[t._v("Java语言规范保证，一个线程终止后，该线程对共享变量的更新对于调用该线程的"),n("code",[t._v("join")]),t._v("方法的线程而言是可见的")])]),t._v(" "),n("h4",{attrs:{id:"其他问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他问题"}},[t._v("#")]),t._v(" 其他问题")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("可见性得以保障，并不意味着一个线程能够看到另外一个线程更新的所有变量的值。如果一个线程在某个时刻更新了"),n("code",[t._v("多个共享变量的值")]),t._v("， 那么此后其他线程再来读取这些变量时，这些线程所读取到的变量值有些是其他线程更新过的值，而有些则可能仍然是其他线程更新之前的值（旧值）。")])]),t._v(" "),n("li",[n("p",[t._v("另一方面，可见性的保障仅仅意味着一个线程能够读取到共享变量的"),n("code",[t._v("相对新值")]),t._v("，而不能保障该线程能够读取到相应变量的"),n("code",[t._v("最新值")]),t._v("。")])])]),t._v(" "),n("p",[t._v("相对新值")]),t._v(" "),n("blockquote",[n("p",[t._v("对于一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。")])]),t._v(" "),n("p",[t._v("最新值")]),t._v(" "),n("blockquote",[n("p",[t._v("如果读取共享变量的线程，在读取并使用该变量的时候其他线程无法更新该变量的值，那么该线程读取到的相对新值就被称为该变量的最新值。")])]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("可见性问题是多线程衍生出来的问题，它与程序的目标运行环境是单核处理器还是多核处理器无关。 也就是说，单处理器系统中实现的多线程编程也可能出现可见性问题：在目标运行环境是单处理器的情况下， 多线程的并发执行实际上是通过时间片分配实现的。此时，虽然多个线程是运行在同一个处理器上的， 但是由于在发生上下文切換的时候，一个线程对寄存器变量的修改会被作为该线程的线程上下文保存起来， 这导致另外一个线程无法“看到”该线程对这个变量的修政，因此，单处理器系统中实现的多线程编程也可能出现可见性问题。")])]),t._v(" "),n("h3",{attrs:{id:"三大特性-有序性-ordering"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三大特性-有序性-ordering"}},[t._v("#")]),t._v(" 三大特性：有序性（Ordering）")]),t._v(" "),n("h4",{attrs:{id:"重排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重排序"}},[t._v("#")]),t._v(" 重排序")]),t._v(" "),n("p",[t._v("重排序(Reordering)")]),t._v(" "),n("p",[t._v("在多核处理器的环境下，代码的执行顺序可能是没有保障的：编译器可能改变两个操作的先后顺序； 工处理器可能不是完全依照程序的目标代码所指定的顺序执行指令；")]),t._v(" "),n("p",[t._v("另外，在一个处理器上执行的多个操作， 从其他处理器的角度来看其顺序可能与目标代码所指定的顺序不一致。这种现象就叫作重排序。")]),t._v(" "),n("p",[t._v("重排序是对"),n("code",[t._v("内存访问有关")]),t._v("的操作（读和写）所做的一种"),n("code",[t._v("优化")]),t._v("，它可以在"),n("code",[t._v("不影响单线程程序正确性")]),t._v("的情况下提升程序的性能。 但是，它可能对"),n("code",[t._v("多线程程序的正确性")]),t._v("产生影响，即它可能导致"),n("code",[t._v("线程安全问题")]),t._v("。")]),t._v(" "),n("h4",{attrs:{id:"排序顺序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#排序顺序"}},[t._v("#")]),t._v(" 排序顺序")]),t._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[t._v("相关信息")]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("源代码顺序")])]),t._v(" "),n("p",[t._v("源代码中所指定的内存访问操作顺序。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("程序顺序")])]),t._v(" "),n("p",[t._v("在给定处理器上运行的目标代码所指定的内存访问操作顺序。尽管Java虚拟机执行代码有两种方式： 解释执行（被执行的是字节码）和编译执行（被执行的是机器码），里的目标代码是指字节码。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("执行顺序")])]),t._v(" "),n("p",[t._v("内存访问操作在给定处理器上的"),n("code",[t._v("实际执行顺序")]),t._v("。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("感知顺序")])]),t._v(" "),n("p",[t._v("给定处理器所感知到（看到）的该处理器及其他处理器的内存访问操作发生的顺序。")])])])]),t._v(" "),n("p",[t._v("在此基础上，我们可以将重排序可以分为两类："),n("code",[t._v("指令重排序")]),t._v("和"),n("code",[t._v("存储子系统重排序")]),t._v("。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("重排序类型")]),t._v(" "),n("th",[t._v("重排序表现")]),t._v(" "),n("th",[t._v("重排序来源")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("指令重排序")]),t._v(" "),n("td",[t._v("程序顺序与源代码顺序不一致")]),t._v(" "),n("td",[t._v("JIT编译器")])]),t._v(" "),n("tr",[n("td",[t._v("12")]),t._v(" "),n("td",[t._v("执行顺序与程序顺序不一致")]),t._v(" "),n("td",[t._v("JIT编译器、处理器")])]),t._v(" "),n("tr",[n("td",[t._v("存储子系统重排序")]),t._v(" "),n("td",[t._v("源代码顺序、程序顺序和执行顺序这三者保持一致,但是感知顺序与执行顺序不一致")]),t._v(" "),n("td",[t._v("高速缓存、写缓冲器")])])])]),t._v(" "),n("h4",{attrs:{id:"指令重排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指令重排序"}},[t._v("#")]),t._v(" 指令重排序")]),t._v(" "),n("p",[t._v("在"),n("code",[t._v("源代码顺序")]),t._v("与"),n("code",[t._v("程序顺序")]),t._v("不一致，或者"),n("code",[t._v("程序顺序")]),t._v("与"),n("code",[t._v("执行顺序")]),t._v("不一致的情况下，我们就说发生了指令重排序。 指令重排序是一种动作，它"),n("code",[t._v("确确实实")]),t._v("地对指令的顺序做了调整，其重排序的对象是"),n("code",[t._v("指令")]),t._v("。")]),t._v(" "),n("blockquote",[n("p",[t._v("Java平台包含两种编译器:"),n("code",[t._v("静态编译器(Javac)")]),t._v("和"),n("code",[t._v("动态编译器(JIT编译器)")]),t._v("，")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("静态编译器(Javac)")]),t._v("：是将Java源代码(java文本文件)编译为字节码(. class二进制文件),它 是在代码编译阶段介入的。")]),t._v(" "),n("li",[n("strong",[t._v("动态编译器(JIT编译器)")]),t._v("：是将字节码动态编译为Java虚拟机宿主机的本 地代码(机器码,它是在Java程序运行过程中介入的。")])]),t._v(" "),n("p",[t._v("**静态编译器(Javac)"),n("strong",[t._v("基本不会指令重排序，而")]),t._v("动态编译器(JIT编译器)**则可能。")])]),t._v(" "),n("p",[n("strong",[t._v("特征")])]),t._v(" "),n("ol",[n("li",[n("strong",[t._v("重排序可能导致线程安全问题")]),t._v("：在本Demo中，重排序使得sum方法的返回值可能既不是-1(此时helper实例为null)，也不是4。 当然，这并不表示重排序本身是错误的，而是说我们的程序本身有问题──我们的程序没有使用或者没有正确地使用线程同步机制。")]),t._v(" "),n("li",[n("strong",[t._v("重排序不是必然出现的")]),t._v("：本Demo运行时重复调用createHelper和sum共200000次才出现7次重排序，比率为0.035%。")])]),t._v(" "),n("h4",{attrs:{id:"处理器乱序执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理器乱序执行"}},[t._v("#")]),t._v(" 处理器乱序执行")]),t._v(" "),n("p",[t._v("处理器也可能执行指令重排序，这使得执行顺序与程序顺序不一致。这是因为现代处理器为了提高指令执行效率， 往往不是按照程序顺序逐一执行指令的，而是动态调整指令的顺序，做到哪条指令就绪就先执行哪条指令， 这就是处理器处理器对指令进行的重排序，也被称为"),n("code",[t._v("处理器的乱序执行")]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("乱序执行的机制")]),t._v("\n在乱序执行的处理器中，指令是一条一条按照程序顺序被处理器读取的（即“顺序读取”）， 然后这些指令中哪条就绪了哪条就会先被执行，而不是完全按照程序顺序执行（即“乱序执行”）。 这些指令执行的结果会被先存入重排序缓冲器，而不是直接被写入寄存器或者主内存。 重排序缓冲器会将各个指令的执行结果按照相应指令被处理器读取的顺序提交到寄存器或者内存中去(即“顺序提交”)。 在乱序执行的情况下，尽管指令的执行顺序可能没有完全依照程序顺序， 但是由于指令的执行结果的提交（即反映到寄存器和内存中）仍然是按照程序顺序来的， 因此处理器的指令重排序并不会对单线程程序的正确性产生影响。")]),t._v(" "),n("p",[n("strong",[t._v("猜测执行(Speculation)")]),t._v("\n猜测执行技术就好比没有卫星导航时代在陌生地方开车遇到岔路口的情形： 虽然我们不确定其中哪条路能够通往目的地，但是我们可以凭猜测走其中一条路， 万一猜错了（前路不通）可以掉头重新走另外一条路。猜测执行能够造if语句的语句体先于其条件语句被执行的效果, 从而可能导致指令重排序现象。")]),t._v(" "),n("h4",{attrs:{id:"存储子系统重排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#存储子系统重排序"}},[t._v("#")]),t._v(" 存储子系统重排序")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("存储子系统\n主内存(RAM)相对于处理器是一个慢速设备，为了避免其拖后腿，处理器并不是直接访问主内存， 而是通过"),n("code",[t._v("高速缓存")]),t._v("访问主内存的。在此基础上，现代处理器还引人了"),n("code",[t._v("写缓冲器(Store Buffer，也称Write Buffer)")]),t._v("， 以提高写高速缓存操作的效率。有的处理器(如Intel的x86处理器)对所有的写主内存的操作都是通过写缓冲器进行的。 这里，我们将"),n("code",[t._v("写缓冲器")]),t._v("和"),n("code",[t._v("高速缓存")]),t._v("统称为"),n("code",[t._v("存储子系统")]),t._v("。需要注意的是，存储子系统并不是内存的子系统，而是处理器的子系统。")])]),t._v(" "),n("li",[n("p",[t._v("内存重排序(Memory Ordering)\n即使在处理器严格依照程序顺序执行两个内存访问操作的情况下， 在"),n("code",[t._v("存储子系统")]),t._v("的作用下，其他处理器对这两个操作的感知顺序仍然可能与程序顺序不一致， 即这两个操作的执行顺序看起来像是发生了变化。这种现象就是存储子系统重排序，也被称为内存重排序。")])]),t._v(" "),n("li",[n("p",[t._v("与指令重排序的区别\n指令重排序的重排序对象是"),n("code",[t._v("指令")]),t._v("，它实实在在地对指令的顺序进行调整， 而存储子系统重排序是一种"),n("code",[t._v("现象")]),t._v("而不是一种动作，"),n("strong",[t._v("它并没有真正对指令执行顺序进行调整")]),t._v("， 而只是造成了一种指令的执行顺序像是被调整过一样的现象，其重排序的对象是"),n("code",[t._v("内存操作的结果")]),t._v("。")])]),t._v(" "),n("li",[n("p",[t._v("指令重排序的类型\n从处理器的角度来说，读内存操作的实质，是从指定的RAM地址(通过高速缓存)加载数据到寄存器， 因此读内存操作通常被称为Load操作；写内存操作的实质， 是将数据(指令中的操作数或寄存器中的值)存储到指定地址表示的RAM存储单元中，因此写内存操作通常被称为Store。 这样，我们可以把内存重排序分为以下4种。")])])]),t._v(" "),n("h4",{attrs:{id:"貌似串行语义-as-if-serial-semantics"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#貌似串行语义-as-if-serial-semantics"}},[t._v("#")]),t._v(" 貌似串行语义(As-if-serial Semantics)")]),t._v(" "),n("p",[t._v("定义\n重排序并非随意地对指令、内存操作的结果进行杂乱无章的排序或者顺序调整，而是遵循一定的规则。 编译器（主要是JIT编译器）、处理器（包括其存储子系统）都会遵守这些规则， 从而给单线程程序创造一种假象──指令是按照源代码顺序执行的。这种假象就被称为"),n("code",[t._v("貌似串行语义")]),t._v("。 貌似串行语义只是从"),n("strong",[t._v("单线程程序的角度")]),t._v("保证重排序后的运行结果不影响程序的正确性，它并不保证多线程环境下程序的正确性。")]),t._v(" "),n("p",[n("strong",[t._v("数据依赖关系(Data Dependency)")])]),t._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[t._v("相关信息")]),t._v(" "),n("p",[t._v("为了保证貌似串行语义，"),n("strong",[t._v("存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才会被重排序")]),t._v("。 如果两个操作(指令)访问同一个变量(地址)，且其中一个操作(指令)为写操作， 那么这两个操作之间就存在数据依赖关系，这些操作包括：写后读(WAR)、读后写(RAW)、写后写(WAW)三种操作。")])]),t._v(" "),n("p",[n("strong",[t._v("控制依赖关系(Control Dependency)")])]),t._v(" "),n("div",{staticClass:"custom-block info"},[n("p",{staticClass:"custom-block-title"},[t._v("相关信息")]),t._v(" "),n("p",[t._v("如果一条语句（指令）的执行结果会决定另外一条语句（指令）能否被执行， 那么这两条语句（指令）之间就存在控制依赖关系。存在控制依赖关系的语句是可以允许被重排序的， 存在控制依赖关系的语句最典型的就是if语句中的条件表达式和相应的语句体。 允许这种重排序意味着处理器可能先执行f语句体所涉及的内存访问操作，然后再执行相应的条件判断。 允许对存在控制依赖关系的语句进行重排序同样也是出于性能考虑， 这是因为存在控制依赖关系的语句(如if语句)会影响处理器对指令序列执行的并行程度。")])]),t._v(" "),n("h4",{attrs:{id:"保障内存访问的顺序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#保障内存访问的顺序"}},[t._v("#")]),t._v(" 保障内存访问的顺序")]),t._v(" "),n("p",[t._v("貌似串行语义"),n("strong",[t._v("只是保障重排序不影响单线程程序的正确性")]),t._v("，从这个角度出发， 多线程程序的有序性的保障可以理解为通过某些措施使得貌似串行语义扩展到多线程程序。"),n("strong",[t._v("即重排序要么不发生， 要么即使发生了也不会影响多线程程序的正确性")]),t._v("，这样有序性的保障也可以理解为从逻辑上部分禁止重排序。")]),t._v(" "),n("p",[t._v("从底层的角度来说，禁止重排序是通过调用处理器提供相应的指令（"),n("code",[t._v("内存屏障")]),t._v("）来实现的。 当然，Java作为一个跨平台的语言，它会替我们与这类指令打交道，而我们只需要使用语言本身提供的机制即可。")]),t._v(" "),n("h4",{attrs:{id:"可见性与有序性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可见性与有序性"}},[t._v("#")]),t._v(" 可见性与有序性")]),t._v(" "),n("p",[t._v("可见性是有序性的基础\n可见性描述的是一个线程对共享变量的更新对于另外一个线程是否可见， 或者说什么情况下可见的问题。有序性描述的是，一个处理器上运行的线程对共享变量所做的更新， 在其他处理器上运行的其他线程看来，这些线程是以什么样的顺序观察到这些更新的问题。 因此，可见性是有序性的基础。另一方面，二者又是相互区分的。")]),t._v(" "),n("h3",{attrs:{id:"上下文切换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#上下文切换"}},[t._v("#")]),t._v(" 上下文切换")]),t._v(" "),n("p",[t._v("上下文切换( Context Switch)在某种程度上可以被看作多个线程共享同一个处理器的产物,它是多线程编程中的一个重要概念。")]),t._v(" "),n("h4",{attrs:{id:"描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),n("p",[t._v("当一个进程中的一个线程由于其"),n("code",[t._v("时间片")]),t._v("用完，或者因其自身原因（比如稍后再继续运行）被迫或者主动暂停其运行时， 另外一个线程（可能是同一个进程或者其他进程中的一个线程）可以被操作系统（线程调度器）选中， "),n("code",[t._v("占用处理器")]),t._v("开始或者继续其运行。这种一个线程被暂停，另外一个线程被选中开始或者继续运行的过程就叫作线程上下文切换。 也可简单地称为上下文切换。")]),t._v(" "),n("p",[t._v("从Java应用的角度来看,一个线程的生命周期状态在 "),n("code",[t._v("RUNNABLE")]),t._v("状态与"),n("code",[t._v("非 RUNNABLE状态")]),t._v("(包括 BLOCKED、 WAITING和 TIMED WAITING中的任意一个子状 态)之间切换的过程就是一个上下文切换的过程。")]),t._v(" "),n("h4",{attrs:{id:"上下文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#上下文"}},[t._v("#")]),t._v(" 上下文")]),t._v(" "),n("p",[t._v("切出和切入的时候，操作系统需要保存和恢复相应线程的进度信息， 即切入和切出那一刻相应线程所执行的任务状态信息（如计算的中间结果以及执行到了哪条指令）。 "),n("strong",[t._v("这个进度信息就被称为上下文")]),t._v("。 它一般包括"),n("code",[t._v("通用寄存器(General Purpose Register")]),t._v(")和"),n("code",[t._v("程序计数器(Program Counter)")]),t._v("中的内容。")]),t._v(" "),n("h4",{attrs:{id:"切出和切入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#切出和切入"}},[t._v("#")]),t._v(" 切出和切入")]),t._v(" "),n("ul",[n("li",[t._v("一个线程被剥夺处理器的使用权而被暂停运行就被称为切出")]),t._v(" "),n("li",[t._v("一个线程被操作系统选中占用处理器开始或者继续其运行就被称为切入。")])]),t._v(" "),n("h4",{attrs:{id:"上下文切换分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#上下文切换分类"}},[t._v("#")]),t._v(" 上下文切换分类")]),t._v(" "),n("p",[t._v("按照导致上下文切换的因素划分，我们可以将上下文切换分为")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("自发性上下文切换")])]),t._v(" "),n("li",[n("strong",[t._v("非自发性上下文切换")])])]),t._v(" "),n("p",[n("strong",[t._v("自发性上下文切换(Voluntary Context Switch)")])]),t._v(" "),n("p",[t._v("自发性上下文切换指线程由于其自身因素导致的切出。")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" millis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nanos"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LockSupport")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("park")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("blockquote",[n("p",[t._v("另外,线程发起了IO操作(如读取文件)或者等待其他线程持有的锁(锁的概念在 第3章会介绍)也会导致自发性上下文切换。")])]),t._v(" "),n("p",[n("strong",[t._v("非自发性上下文切换(Involuntary Context Switch)")])]),t._v(" "),n("p",[t._v("线程由于"),n("code",[t._v("线程调度器")]),t._v("的原因被迫切出。 导致非自发性上下文切换的常见因素包括：")]),t._v(" "),n("ul",[n("li",[t._v("被切出线程的时间片用完")]),t._v(" "),n("li",[t._v("有一个比被切出线程优先级更高的线程需要被运行。")])]),t._v(" "),n("p",[t._v("从Java平台的角度来看，Java虚拟机的垃圾回收(Garbage Collect)动作也可能导致非自发性上下文切换。 这是因为垃圾回收器在执行垃圾回收的过程中，可能需要暂停所有应用线程才能完成其工作， 比如在主要回收(Major Collection)过程中，垃圾回收器在对Java虚拟机堆内存区域进行整理的时候需要先停止所有应用线程。")]),t._v(" "),n("h4",{attrs:{id:"上下文切换的开销"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#上下文切换的开销"}},[t._v("#")]),t._v(" 上下文切换的开销")]),t._v(" "),n("p",[t._v("上下文切换的开销包括"),n("code",[t._v("直接开销")]),t._v("和"),n("code",[t._v("间接开销")]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("️直接开销")])]),t._v(" "),n("ul",[n("li",[t._v("操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。")]),t._v(" "),n("li",[t._v("️线程调度器进行线程调度的开销：比如，按照一定的规则决定哪个线程会占用处理器运行。")])]),t._v(" "),n("p",[n("strong",[t._v("间接开销")])]),t._v(" "),n("ul",[n("li",[t._v("️处理高速缓存重新加载的开销：一个被切出的线程可能稍后在"),n("strong",[t._v("另外一个处理器")]),t._v("上被切入继续运行。 由于这个处理器之前可能未运行过该线程，那么这个线程在其继续运行过程中需访问的变量， 仍然需要被该处理器重新从主内存或者通过缓存致性协议从其他处理器加载到高速缓存之中，这是有一定时间消耗的。")]),t._v(" "),n("li",[t._v("高速缓存内容冲刷(Flush)的开销：️上下文切换也可能导致整个一级高速缓存中的内容被冲刷， 即一级高速缓存中的内容会被写入下一级高速缓存（如二级高速缓存），或者主内存(RAM)中")])]),t._v(" "),n("p",[t._v("线程的数量越多，可能导致的上下文切换的开销也就可能越大。也就是说，多线程编程中使用的线程数量越多， 程序的计算效率可能反而越低。因此，在设计多线程程序的时候，减少上下文切换也是一个重要的考量因素。")]),t._v(" "),n("h3",{attrs:{id:"线程的活性故障"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#线程的活性故障"}},[t._v("#")]),t._v(" 线程的活性故障")]),t._v(" "),n("p",[t._v("事实上，线程并不是一直处于"),n("code",[t._v("RUNNABLE")]),t._v("状态，导致一个线程可能处于非RUNNABLE状态的因素， 除了资源（主要是处理器资源有限而导致的上下文切换）限制之外，还有"),n("code",[t._v("程序自身的错误和缺陷")]),t._v("。 由资源稀缺性或者程序自身的问题和缺陷导致线程一直处于"),n("code",[t._v("非RUNNABLE")]),t._v("状态， 或线程虽然处于RUNNABLE状态，但是其要执行的任务却一直无法进展，这种现象被称为线程活性故障。")]),t._v(" "),n("p",[t._v("常见的线程活性故障包括以下几种：")]),t._v(" "),n("ul",[n("li",[t._v("死锁(Deadlock)")]),t._v(" "),n("li",[t._v("锁死(Lockout)")]),t._v(" "),n("li",[t._v("活锁(Livelock)")]),t._v(" "),n("li",[t._v("饥饿(Starvation)")])]),t._v(" "),n("h4",{attrs:{id:"死锁-deadlock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#死锁-deadlock"}},[t._v("#")]),t._v(" 死锁(Deadlock)")]),t._v(" "),n("p",[t._v("死锁只会出现在一组线程集合中，如果集合中的每一个线程都持有其他线程需要的资源， 导致所有线程因等待资源而被永暂停，这种现象就称之为死锁。 死锁产生的典型场景是线程X持有资源A的时候等待线程Y释放资源B， 同时线程Y在持有资源B的时候却等待线程X释放资源A，这就好比鹬蚌相争故事中的情形。")]),t._v(" "),n("h4",{attrs:{id:"锁死-lockout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#锁死-lockout"}},[t._v("#")]),t._v(" 锁死(Lockout)")]),t._v(" "),n("p",[t._v("锁死与死锁类似，"),n("strong",[t._v("锁死是指线程在等待一个永远不会发生的事件")]),t._v("；与死锁不同的是， 锁死的线程可能不持有任何资源。一个较典型的例子就是信号丢失导致的锁死， 比如对 \t"),n("code",[t._v("CountDownLatch.countDown()")]),t._v(" 方法的调用没有放在 finally 块中时， 可能因为异常抛出导致执行 "),n("code",[t._v("CountDownLatch.await()")]),t._v(" 的线程永远处于等待状态。")]),t._v(" "),n("h4",{attrs:{id:"活锁-livelock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#活锁-livelock"}},[t._v("#")]),t._v(" 活锁(Livelock)")]),t._v(" "),n("p",[t._v("指线程一直处于运行状态,但是其任务却一直无法进展的一种活性故障。 活锁的一个重要特征就是线程一直处于运行状态，区别于死锁、锁死的线程处于等待状态。 同样以鹬蚌相争故事为例，不同的是两者商量好如果同时咬住对方，则两者都松开口， 但松口后两者又同时咬住了对方，于是两者在不停的咬住与松口，直至累死。")]),t._v(" "),n("h4",{attrs:{id:"饥饿-starvation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#饥饿-starvation"}},[t._v("#")]),t._v(" 饥饿(Starvation)")]),t._v(" "),n("p",[t._v("线程一直无法获得其所需的资源而导致其任务直无法进展的一种活性故障。 比如由于当前线程的优先级极低，导致资源一直被其他线程抢占。")]),t._v(" "),n("h3",{attrs:{id:"资源争用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#资源争用"}},[t._v("#")]),t._v(" 资源争用")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("线程间的资源共享")]),t._v(" "),n("p",[t._v("由于资源的稀缺性（例如有限的处理器资源）及资源本身的特性 （例如打印机一次 只能打印一个文件），往往需要在多个线程间共享同一个资源。")])]),t._v(" "),n("li",[n("p",[t._v("排他性资源")]),t._v(" "),n("p",[t._v("一次只能够被一个线程占用的资源被称为排他性资源， 常见的排他性资源包括处理器、数据库连接、文件等。")])]),t._v(" "),n("li",[n("p",[t._v("资源争用(Resource Contention)")]),t._v(" "),n("p",[t._v("在一个线程占用一个排他性资源进行访问（读、写操作）， 而未释放其对资源所有权的时候，其他线程试图访问该资源的现象就被称为资源争用， 简称争用。显然，争用是在并发环境下产生的一种现象。")])]),t._v(" "),n("li",[n("p",[t._v("争用程度")]),t._v(" "),n("p",[t._v("同时试图访问同个已经被其他线程占用的资源的线程数量越多，争用的程度就越高， 反之争用的程度就越低。相应的争用就被分别称为高争用和低争用。")])]),t._v(" "),n("li",[n("p",[t._v("资源调度")]),t._v(" "),n("p",[t._v("在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权， 即选择哪个申请者占用该资源的过程就是资源的调度。 获得资源的独占权而又未释放其独占权的线程就被称为该资源的持有线程。")])])]),t._v(" "),n("h3",{attrs:{id:"资源调度策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#资源调度策略"}},[t._v("#")]),t._v(" 资源调度策略")]),t._v(" "),n("p",[t._v("​\t资源调度的一种常见策略就是"),n("code",[t._v("排队")]),t._v("。"),n("code",[t._v("资源调度器")]),t._v("内部维护一个"),n("code",[t._v("等待队列")]),t._v("，在存在资源争用的情况下， "),n("code",[t._v("申请失败的线程")]),t._v("会被存入该队列。通常，被存入等待队列的线程会被暂停。当相应的资源被其持有线程释放时， 等待队列中的一个线程会被选中并被唤醒而获得再次申请资源的机会。 被唤醒的线程如果申请到资源的独占权，那么该线程会从等待队列中移除； 否则，该线程仍然会停留在等待队列中等待再次申请的机会，即该线程会再次被暂停。 因此，等待队列中的等待线程可能经历若干次暂停与唤醒才获得相应资源的独占权。可见，资源的调度可能导致上下文切换。")]),t._v(" "),n("h4",{attrs:{id:"资源调度的公平性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#资源调度的公平性"}},[t._v("#")]),t._v(" 资源调度的公平性")]),t._v(" "),n("p",[t._v("资源调度策略的一个常见特性就是它能否保证公平性。")]),t._v(" "),n("p",[t._v("所谓公平性，是指资源的申请者（线程），是否按照其"),n("code",[t._v("申请（请求）资源的顺序")]),t._v("而被授予资源的独占权。 如果资源的任何一个先申请者，总是能够比任何一个后申请者先获得该资源的独占权， 那么相应的资源调度策略就被称为是公平的； 如果资源的后申请者可能比先申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是非公平的。")]),t._v(" "),n("p",[t._v("需要注意的是，非公平的资源调度策略往往只是说明它并不保证资源调度的公平性， "),n("strong",[t._v("即它允许不公平的资源调度的出现")]),t._v("，而不是表示它刻意造就不公平的资源调度。")]),t._v(" "),n("h4",{attrs:{id:"公平的调度策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#公平的调度策略"}},[t._v("#")]),t._v(" 公平的调度策略")]),t._v(" "),n("p",[t._v("公平的调度策略不允许插队现象的出现，即只有在资源未被其他任何线程占用， 并且没有其他活跃线程申请该资源情况下，队列中的线程才被允许被唤醒，抢占相应资源的独占权。 其中，抢占成功的申请者获得相应资源的独占权，而抢占失败的申请者会进入等待队列。 因此，公平调度策略中的资源申请者总是按照"),n("code",[t._v("先来后到")]),t._v("的顺序来获得资源的独占权。")]),t._v(" "),n("h4",{attrs:{id:"非公平的调度策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#非公平的调度策略"}},[t._v("#")]),t._v(" 非公平的调度策略")]),t._v(" "),n("p",[t._v("而非公平的调度策略则"),n("code",[t._v("允许插队现象")]),t._v("，即一个线程释放其资源独占权的时候，等待队列中的一个线程会被唤醒申请相应的资源。而在这个过程中，可能存在另一个活跃线程与这个被唤醒的线程共同参与相应资源的抢占。 因此，非公平调度策略中被唤醒的线程不一定就能够成功申请到资源。因此，在极端的情况下， 非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现"),n("code",[t._v("饥饿现象")]),t._v("。")]),t._v(" "),n("h4",{attrs:{id:"对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对比"}},[t._v("#")]),t._v(" 对比")]),t._v(" "),n("ul",[n("li",[t._v("从申请者个体的角度来看：使用公平调度策略时，申请者获得相应资源的独占权所需时间的偏差可能比较小， 即每个申请者成功申请到资源所需的时间基本相同；而使用非公平的调度策略时，申请者获得相应资源的独占权所需时间的偏差可能比较大，有的线程很快就申请到资源， 而有的线程则要经历若干次暂停与唤醒才成功申请到资源。")]),t._v(" "),n("li",[t._v("从效率上看：在非公平调度策略中，资源的持有线程释放该资源的时候，等待队列中的一个线程会被唤醒， 而该线程从被唤醒到其继续运行可能需要一段时间。"),n("strong",[t._v("在该时间内，如果使用非公平的调度策略， 新来的线程（活跃线程）可以先被授予该资源的独占权")]),t._v("，如果这个新来的线程占用该资源的时间不长，那么它完全有可能在被唤醒的线程继续其运行前释放相应的资源，从而不影响该被唤醒的线程申请资源。 这种情形下，非公平调度策略可以减少上下文切换的次数。 但是，如果多数（甚至每个）线程占用资源的时间相当长，那么允许新来的线程抢占资源不会带来任何好处， 反而会导致被唤醒的线程需要再次经历暂停和唤醒，从而增加了上下文切換。 因此，多数线程占用资源的时间相当长的情况下不适合使用非公平调度策略。")])]),t._v(" "),n("p",[t._v("综上，在没有特别需要的情况下，我们默认选择非公平调度策略即可。 在资源的持有线程占用资源的时间相对长，或线程申请资源的平均间隔时间相对长， 或对资源申请所需的时间偏差有所要求（即时间偏差较小）的情况下可以考虑使用公平调度策略。")])])}),[],!1,null,null,null);s.default=e.exports}}]);