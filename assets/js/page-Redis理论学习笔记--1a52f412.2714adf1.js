(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{682:function(e,s,a){e.exports=a.p+"assets/img/Why_use_redis_high-performance.c1a0af65.jpg"},683:function(e,s,a){e.exports=a.p+"assets/img/Why_use_redis_high-concurrency.992ae12b.jpg"},684:function(e,s,a){e.exports=a.p+"assets/img/Redis_thread_model.67d63984.png"},685:function(e,s,a){e.exports=a.p+"assets/img/Redis_single_multi-threaded_GET_performance_comparison.b0d82d00.jpg"},686:function(e,s,a){e.exports=a.p+"assets/img/Redis_single_multi-threaded_SET_performance_comparison.5391ac78.jpg"},687:function(e,s,a){e.exports=a.p+"assets/img/save_trigger_mode.47130e98.jpg"},688:function(e,s,a){e.exports=a.p+"assets/img/bgsave_trigger_mode.85f4142f.jpg"},689:function(e,s,a){e.exports=a.p+"assets/img/The_difference_between_save_and_bgsave.f4da06d6.jpg"},690:function(e,s,a){e.exports=a.p+"assets/img/AOF_running-principle&creation.8678252c.jpg"},691:function(e,s,a){e.exports=a.p+"assets/img/Principle_of_bgrewriteaof_file_rewriting.c432c925.jpg"},692:function(e,s,a){e.exports=a.p+"assets/img/Cache_processing_flow.30bd8a69.jpg"},693:function(e,s,a){e.exports=a.p+"assets/img/Cache_penetration_processing_flow.933948da.jpg"},694:function(e,s,a){e.exports=a.p+"assets/img/bloom-filter.a91abb59.jpg"},695:function(e,s,a){e.exports=a.p+"assets/img/Cache-breakdown_mutex_key.776ddda4.png"},696:function(e,s,a){e.exports=a.p+"assets/img/Cache_avalanche_solution.4d09026c.jpg"},697:function(e,s,a){e.exports=a.p+"assets/img/difference_between_redis_and_memcached.f0d3d208.jpg"},769:function(e,s,a){"use strict";a.r(s);var t=a(2),_=Object(t.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_1-参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-参考"}},[e._v("#")]),e._v(" 1. 参考")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247484858&idx=1&sn=8e222ea6115e0b69cac91af14d2caf36&chksm=cea24a71f9d5c367148dccec3d5ddecf5ecd8ea096b5c5ec32f22080e66ac3c343e99151c9e0&token=1082669959&lang=zh_CN&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("redis 总结——重构版"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("https://www.cnblogs.com/jasontec/p/9699242.html")]),e._v(" "),t("li",[e._v("https://github.com/Snailclimb/JavaGuide")]),e._v(" "),t("li",[t("a",{attrs:{href:"http://redisdoc.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Redis中文文档"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV1S54y1R7SB",target:"_blank",rel:"noopener noreferrer"}},[e._v("【狂神说Java】Redis最新超详细版教程通俗易懂"),t("OutboundLink")],1)])])]),e._v(" "),t("h2",{attrs:{id:"_2-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-简介"}},[e._v("#")]),e._v(" 2. 简介")]),e._v(" "),t("p",[e._v("Redis的全称是"),t("code",[e._v("Remote Dictionary Server")]),e._v("，即"),t("code",[e._v("远程字典服务")]),e._v("。官方原话如下：")]),e._v(" "),t("p",[e._v("Redis是一个开源(BSD许可)的,内存中的数据结构存储系统,它可以用作"),t("code",[e._v("数据库")]),e._v("、"),t("code",[e._v("缓存")]),e._v("和"),t("code",[e._v("消息中间件MQ")]),e._v("。它支持多种类型的数据结构,如字符串( strings),散列( hashes),列表( lists),集合(sets),有序集合( sorted sets)与范围查询,bitmaps, hyperloglogs和地理空间( geospatial)索引半径查询。 Redis内置了复制( replication),LUA脚本(Luascripting),LRU驱动事件( LRU eviction),事务( transactions)和不同级别的磁盘持久化( persistence),并通过Reds哨兵( Sentinel)和自动分区( Cluster)提供高可用性( high availability)。")]),e._v(" "),t("h3",{attrs:{id:"_2-1-优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-优点"}},[e._v("#")]),e._v(" 2.1 优点")]),e._v(" "),t("p",[e._v("因为是"),t("code",[e._v("纯内存")]),e._v("操作, Redis的性能非常出色,每秒可以处理超过"),t("code",[e._v("10万次读写操作")]),e._v("是已知性能最快的"),t("code",[e._v("Key- Value DB")]),e._v("。Redis的出色之处不仅仅是性能, Redis最大的魅力是支持保存"),t("code",[e._v("多种数据结构")]),e._v(",此外"),t("code",[e._v("单个value")]),e._v("的最大限制是"),t("code",[e._v("1GB")]),e._v(",不像 "),t("code",[e._v("memcached")]),e._v("只能保存"),t("code",[e._v("1MB")]),e._v("的数据,因此 Redis可以用来实现很多有用的功能。比方说用他的"),t("code",[e._v("Lst")]),e._v("来做"),t("code",[e._v("FIFO双向链表")]),e._v(",实现一个轻量级的高性能消息队列服务用他的Set可以做高性能的tag系统等等另外 Redis也可以对存入的"),t("code",[e._v("Key-Vaue")]),e._v("设置"),t("code",[e._v("expire")]),e._v("时间,因此也可以被当作一个功能加强版的 memcached来用。")]),e._v(" "),t("h3",{attrs:{id:"_2-2-缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-缺点"}},[e._v("#")]),e._v(" 2.2 缺点")]),e._v(" "),t("p",[e._v("Redis的主要缺点是"),t("code",[e._v("数据库容量")]),e._v("受到"),t("code",[e._v("物理内存")]),e._v("的限制,不能用作"),t("code",[e._v("海量数据的高性能读写")]),e._v(",因此 Redis适合的场景主要局限在较小数据量的高性能操作和运算上。")]),e._v(" "),t("p",[e._v("简单来说 redis 就是⼀个数据库，不过与传统数据库不同的是 redis 的数据是存在内存中的，所以读 写速度⾮常快，因此 redis 被⼴泛应⽤于缓存⽅向。另外，redis 也经常⽤来做"),t("code",[e._v("分布式锁")]),e._v("。redis 提 供了多种数据类型来⽀持不同的业务场景。除此之外，redis ⽀持事务 、持久化、LUA脚本、LRU驱动 事件、多种集群⽅案。")]),e._v(" "),t("h2",{attrs:{id:"_3-为什么要用-redis-为什么要用缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-为什么要用-redis-为什么要用缓存"}},[e._v("#")]),e._v(" 3. 为什么要用 redis /为什么要用缓存")]),e._v(" "),t("p",[e._v("主要从“"),t("code",[e._v("高性能")]),e._v("”和“"),t("code",[e._v("高并发")]),e._v("”这两点来看待这个问题。")]),e._v(" "),t("h3",{attrs:{id:"_3-1-高性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-高性能"}},[e._v("#")]),e._v(" 3.1 高性能")]),e._v(" "),t("p",[e._v("假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！")]),e._v(" "),t("p",[t("img",{attrs:{src:a(682),alt:"为什么使用redis-高性能"}})]),e._v(" "),t("h3",{attrs:{id:"_3-2-高并发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-高并发"}},[e._v("#")]),e._v(" 3.2 高并发")]),e._v(" "),t("p",[e._v("直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。")]),e._v(" "),t("p",[t("img",{attrs:{src:a(683),alt:"为什么使用redis-高并发"}})]),e._v(" "),t("h3",{attrs:{id:"_3-3-为什么要用-redis-而不用-map-guava-做缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-为什么要用-redis-而不用-map-guava-做缓存"}},[e._v("#")]),e._v(" 3.3 为什么要⽤ redis ⽽不⽤ map/guava 做缓存?")]),e._v(" "),t("p",[e._v("缓存分为本地缓存和分布式缓存。以 Java 为例，使⽤⾃带的 map 或者 guava 实现的是本地缓存，最主要的特点是轻量以及快速，⽣命周期随着 jvm 的销毁⽽结束，并且在多实例的情况下，每个实例都 需要各⾃保存⼀份缓存，缓存不具有⼀致性。 使⽤ redis 或 memcached 之类的称为分布式缓存，在多实例的情况下，各实例共⽤⼀份缓存数据，缓 存具有⼀致性。缺点是需要保持 redis 或 memcached服务的⾼可⽤，整个程序架构上较为复杂。")]),e._v(" "),t("h2",{attrs:{id:"_4-redis-的线程模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-redis-的线程模型"}},[e._v("#")]),e._v(" 4. redis 的线程模型")]),e._v(" "),t("p",[e._v("参考")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("https://blog.csdn.net/m0_37524661/article/details/87086267")]),e._v(" "),t("li",[e._v("https://baijiahao.baidu.com/s?id=1666100733546359034&wfr=spider&for=pc")])])]),e._v(" "),t("p",[t("img",{attrs:{src:a(684),alt:"Redis线程模型"}})]),e._v(" "),t("h3",{attrs:{id:"_4-1-redis单线程模型指的是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-redis单线程模型指的是什么"}},[e._v("#")]),e._v(" 4.1 redis单线程模型指的是什么")]),e._v(" "),t("p",[e._v("Redis基于"),t("code",[e._v("Reactor")]),e._v("模式开发了网络事件处理器，这个处理器被称为"),t("code",[e._v("文件事件处理器")]),e._v("。它的组成结构为4部分：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("p",[e._v("多个套接字")])]),e._v(" "),t("li",[t("p",[e._v("IO多路复用程序")])]),e._v(" "),t("li",[t("p",[e._v("文件事件分派器")])]),e._v(" "),t("li",[t("p",[e._v("事件处理器")])])])]),e._v(" "),t("p",[e._v("redis 内部使⽤⽂件事件处理器 "),t("code",[e._v("file event handler")]),e._v(" ，这个"),t("code",[e._v("⽂件事件处理器")]),e._v("是"),t("code",[e._v("单线程")]),e._v("的，所以 redis 才叫做"),t("code",[e._v("单线程模型")]),e._v("。它采⽤ "),t("code",[e._v("IO 多路复⽤机")]),e._v("制同时监听多个 "),t("code",[e._v("socket")]),e._v("，根据 "),t("code",[e._v("socket")]),e._v(" 上的事件 来选择对应的事件处理器进⾏处理")]),e._v(" "),t("p",[e._v("Redis客户端对服务端的每次调用都经历了"),t("code",[e._v("发送命令")]),e._v("，"),t("code",[e._v("执行命令")]),e._v("，"),t("code",[e._v("返回结果")]),e._v("三个过程。其中执行命令阶段，由于Redis是"),t("code",[e._v("单线程")]),e._v("来处理命令的，所有每一条到达服务端的命令不会立刻执行，所有的命令都会进入一个队列中，然后逐个被执行。并且多个客户端发送的命令的执行"),t("code",[e._v("顺序是不确定")]),e._v("的。但是可以确定的是不会有两条命令被同时执行，不会产生并发问题，这就是Redis的单线程基本模型。")]),e._v(" "),t("blockquote",[t("p",[e._v("目前redis的网络处理方面时多线程，但是核心模块方面还是单线程")])]),e._v(" "),t("h3",{attrs:{id:"_4-2-redis是单线程模型为什么效率还这么高"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-redis是单线程模型为什么效率还这么高"}},[e._v("#")]),e._v(" 4.2 redis是单线程模型为什么效率还这么高？")]),e._v(" "),t("blockquote",[t("ol",[t("li",[t("strong",[e._v("纯内存访问")]),e._v("：数据存放在内存中，内存的响应时间大约是100纳秒，这是Redis每秒万亿级别访问的重要基础。")]),e._v(" "),t("li",[t("strong",[e._v("非阻塞I/O")]),e._v("：Redis采用epoll做为I/O多路复用技术的实现，再加上Redis自身的事件处理模型将epoll中的连接，读写，关闭都转换为了时间，不在I/O上浪费过多的时间。")]),e._v(" "),t("li",[e._v("单线程避免了线程切换和竞态产生的消耗。")]),e._v(" "),t("li",[e._v("Redis采用单线程模型，每条命令执行如果占用大量时间，会造成其他线程阻塞，对于Redis这种高性能服务是致命的，所以Redis是面向高速执行的数据库")])])]),e._v(" "),t("h3",{attrs:{id:"_4-3-rector模式简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-rector模式简介"}},[e._v("#")]),e._v(" 4.3 rector模式简介")]),e._v(" "),t("p",[e._v("参考")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("https://www.cnblogs.com/crazymakercircle/p/9833847.html")])])]),e._v(" "),t("h3",{attrs:{id:"_4-4-为什么网络处理要引入多线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-为什么网络处理要引入多线程"}},[e._v("#")]),e._v(" 4.4 为什么网络处理要引入多线程？")]),e._v(" "),t("p",[e._v("之前的段落说了，Redis 的瓶颈并不在 CPU，而在"),t("code",[e._v("内存")]),e._v("和"),t("code",[e._v("网络I/O")]),e._v("。")]),e._v(" "),t("p",[e._v("内存不够的话，可以加内存或者做数据结构优化和其他优化等，但网络的性能优化才是大头，网络 IO 的读写在 Redis 整个执行期间占用了大部分的 CPU 时间，如果把网络处理这部分做成多线程处理方式，那对整个 Redis 的性能会有很大的提升。")]),e._v(" "),t("p",[t("img",{attrs:{src:a(685),alt:"redis单多线程GET性能对比"}})]),e._v(" "),t("p",[t("img",{attrs:{src:a(686),alt:"redis单多线程SET性能对比"}})]),e._v(" "),t("h2",{attrs:{id:"_5-常⻅数据结构以及使用场景分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-常⻅数据结构以及使用场景分析"}},[e._v("#")]),e._v(" 5.常⻅数据结构以及使⽤场景分析")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("数据结构")]),e._v(" "),t("th",[e._v("常用命令")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("String")]),e._v(" "),t("td",[e._v("set,get,decr,incr,mget")])]),e._v(" "),t("tr",[t("td",[e._v("Hash")]),e._v(" "),t("td",[e._v("hget,hset,hgetall")])]),e._v(" "),t("tr",[t("td",[e._v("List")]),e._v(" "),t("td",[e._v("lpush,rpush,lpop,rpop,lrange")])]),e._v(" "),t("tr",[t("td",[e._v("Set")]),e._v(" "),t("td",[e._v("sadd,spop,smembers,sunion")])]),e._v(" "),t("tr",[t("td",[e._v("ZSet（Sorted Set）")]),e._v(" "),t("td",[e._v("zadd,zrange,zrem,zcard")])])])]),e._v(" "),t("h3",{attrs:{id:"_5-1-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-string"}},[e._v("#")]),e._v(" 5.1 String")]),e._v(" "),t("blockquote",[t("p",[e._v("常⽤命令: set,get,decr,incr,mget 等。")])]),e._v(" "),t("p",[e._v("String数据结构是简单的key-value类型，value其实不仅可以是String，也可以是数字。 常规keyvalue缓存应⽤； 常规计数：微博数，粉丝数等。")]),e._v(" "),t("p",[e._v("string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。")]),e._v(" "),t("h3",{attrs:{id:"_5-2-hash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-hash"}},[e._v("#")]),e._v(" 5.2 Hash")]),e._v(" "),t("blockquote",[t("p",[e._v("常⽤命令： hget,hset,hgetall 等。")])]),e._v(" "),t("p",[e._v("hash 是⼀个 string 类型的 "),t("code",[e._v("field")]),e._v(" 和 "),t("code",[e._v("value")]),e._v(" 的映射表，hash 特别适合⽤于存储对象，后续操作的时 候，你可以直接仅仅修改这个对象中的某个字段的值。 ⽐如我们可以 hash 数据结构来存储⽤户信 息，商品信息等等。⽐如下⾯我就⽤ hash 类型存放了我本⼈的⼀些信息：")]),e._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[e._v("key=JavaUser293847\nvalue="),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n “id”"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n “name”"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" “SnailClimb”"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n “age”"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("22")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n “location”"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" “Wuhan"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" Hubei”\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("h3",{attrs:{id:"_5-3-list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-list"}},[e._v("#")]),e._v(" 5.3 List")]),e._v(" "),t("blockquote",[t("p",[e._v("常⽤命令: lpush,rpush,lpop,rpop,lrange等")])]),e._v(" "),t("p",[e._v("Redis list 的实现为⼀个"),t("code",[e._v("双向链表")]),e._v("。Redis list 的应⽤场景⾮常多，也是Redis最重要的数据结构之⼀，⽐如微博的关注 列表，粉丝列表，消息列表等功能都可以⽤Redis的 list 结构来实现。 Redis list 的实现为⼀个双向链表，即可以⽀持反向查找和遍历，更⽅便操作，不过带来了部分额外 的内存开销。 另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 list 实现分⻚查询，这 个很棒的⼀个功能，基于 redis 实现简单的⾼性能分⻚，可以做类似微博那种下拉不断分⻚的东⻄ （⼀⻚⼀⻚的往下⾛），性能⾼。")]),e._v(" "),t("p",[e._v("在 key 对应 list 的头部添加字符串元素")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[e._v("lpush name value\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("在 key 对应 list 的尾部添加字符串元素")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[e._v("rpush name value\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("key 对应 list 中删除 count 个和 value 相同的元素")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[e._v("lrem name index\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("返回 key 对应 list 的长度")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[e._v("llen name \n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"_5-4-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-set"}},[e._v("#")]),e._v(" 5.4 Set")]),e._v(" "),t("blockquote",[t("p",[e._v("常⽤命令： sadd,spop,smembers,sunion 等")])]),e._v(" "),t("p",[e._v("set 对外提供的功能与list类似是⼀个列表的功能，特殊之处在于 set 是可以⾃动排重的。 当你需要存储⼀个列表数据，⼜不希望出现重复数据时，set是⼀个很好的选择，并且set提供了判断某 个成员是否在⼀个set集合内的重要接⼝，这个也是list所不能提供的。可以基于 set 轻易实现交集、 并集、差集的操作。 ⽐如：在微博应⽤中，可以将⼀个⽤户所有的关注⼈存在⼀个集合中，将其所有粉丝存在⼀个集合。 Redis可以⾮常⽅便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程， 具体命令如下：")]),e._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[e._v("sinterstore key1 key2 key3 将交集存在key1内\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"_5-5-zset-sorted-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-zset-sorted-set"}},[e._v("#")]),e._v(" 5.5 ZSet（Sorted Set）")]),e._v(" "),t("blockquote",[t("p",[e._v("常⽤命令： zadd,zrange,zrem,zcard等")])]),e._v(" "),t("p",[e._v("和set相⽐，sorted set增加了⼀个权重参数score，使得集合中的元素能够按score进⾏有序排列。 举例： 在直播系统中，实时排⾏信息包含直播间在线⽤户列表，各种礼物排⾏榜，弹幕消息（可以理 解为按消息维度的消息排⾏榜）等信息，适合使⽤ Redis 中的 Sorted Set 结构进⾏存储。")]),e._v(" "),t("h2",{attrs:{id:"_6-redis过期时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-redis过期时间"}},[e._v("#")]),e._v(" 6. Redis过期时间")]),e._v(" "),t("p",[e._v("Redis中有个设置时间过期的功能，即对存储在 redis 数据库中的值可以设置⼀个过期时间。作为⼀个 缓存数据库，这是⾮常实⽤的。如我们⼀般项⽬中的 token 或者⼀些登录信息，尤其是短信验证码都 是有时间限制的，按照传统的数据库处理⽅式，⼀般都是⾃⼰判断过期，这样⽆疑会严重影响项⽬性 能。")]),e._v(" "),t("p",[e._v("我们 set key 的时候，都可以给⼀个 "),t("code",[e._v("expire time")]),e._v("，就是过期时间，通过过期时间我们可以指定这个 key 可以存活的时间。 也可以在运行时给存在的键设置剩余的生存时间，不设置则默认为"),t("code",[e._v("-1")]),e._v("，设置为-1时表示"),t("code",[e._v("永久存储")]),e._v("。")]),e._v(" "),t("p",[e._v("如果假设你创建一个 "),t("code",[e._v("Timer")]),e._v("，设置了⼀批 key 只能存活1个⼩时，那么接下来1⼩时后，redis是怎么对这批key进⾏删除 的？")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("定期删除")]),e._v("：redis默认是每隔 "),t("code",[e._v("100ms")]),e._v(" 就随机抽取⼀些设置了过期时间的key，检查其是否过期， 如果过期就删除。注意这⾥是随机抽取的。为什么要随机呢？你想⼀想假如 redis 存了⼏⼗万 个 key ，每隔100ms就遍历所有的设置过期时间的 key 的话，这时候需要的是Cpu处理能力，而不是内存，就会给 CPU 带来很⼤的负载！")]),e._v(" "),t("li",[t("strong",[e._v("惰性删除")]),e._v(" ：定期删除可能会导致很多过期 key 到了时间并没有被删除掉。所以就有了惰性删除。假如你的过期 key，靠定期删除没有被删除掉，还停留在内存⾥，除⾮你的系统去查⼀下那 个 key，才会被redis给删除掉。这就是所谓的惰性删除，也是够懒的哈！ 但是仅仅通过设置过期时间还是有问题的。")])])]),e._v(" "),t("p",[e._v("但是仅仅通过设置过期时间还是有问题的。我们想⼀下：如果定期删除漏掉了很多过期 key，然后你也 没及时去查，也就没⾛惰性删除，此时会怎么样？如果⼤量过期key堆积在内存⾥，导致redis内存块耗 尽了。怎么解决这个问题呢？ redis 内存淘汰机制。")]),e._v(" "),t("h2",{attrs:{id:"_7-redis内存淘汰机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-redis内存淘汰机制"}},[e._v("#")]),e._v(" 7. Redis内存淘汰机制")]),e._v(" "),t("p",[e._v("参考")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("https://blog.csdn.net/weixin_43184769/article/details/90523923")]),e._v(" "),t("li",[e._v("https://blog.csdn.net/qq_28018283/article/details/80764518")]),e._v(" "),t("li",[e._v("配置文件： http://download.redis.io/redis-stable/redis.conf")])])]),e._v(" "),t("p",[e._v("思考一下，如果定期删除漏掉了很多过期的key，而我们也没有再去访问它，如果不加处理，很可能导致内存耗尽。")]),e._v(" "),t("p",[e._v("什么时候触发")]),e._v(" "),t("p",[e._v("Redis配置文件中可以设置"),t("code",[e._v("maxmemory")]),e._v("，内存的最大使用量，到达限度时会执行"),t("code",[e._v("内存淘汰机制")])]),e._v(" "),t("h3",{attrs:{id:"_7-1-内存置换策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-内存置换策略"}},[e._v("#")]),e._v(" 7.1 内存置换策略")]),e._v(" "),t("p",[e._v("没有配置时，"),t("code",[e._v("默认为no-eviction")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("名称")]),e._v(" "),t("th",[e._v("描述")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("volatile-lru")]),e._v(" "),t("td",[e._v("从"),t("code",[e._v("已设置过期时间的数据集")]),e._v("中挑选"),t("code",[e._v("最近最少使用")]),e._v("的数据淘汰")])]),e._v(" "),t("tr",[t("td",[e._v("volatile-lfu（4.0版本）")]),e._v(" "),t("td",[e._v("从"),t("code",[e._v("已设置过期时间的数据集")]),e._v("中挑选"),t("code",[e._v("最不经常")]),e._v("使用的数据淘汰")])]),e._v(" "),t("tr",[t("td",[e._v("volatile-ttl")]),e._v(" "),t("td",[e._v("从"),t("code",[e._v("已设置过期时间的数据集")]),e._v("中挑选"),t("code",[e._v("将要过期")]),e._v("的数据淘汰")])]),e._v(" "),t("tr",[t("td",[e._v("volatile-random")]),e._v(" "),t("td",[e._v("从"),t("code",[e._v("已设置过期时间的数据集")]),e._v("中挑选"),t("code",[e._v("任意数据")]),e._v("淘汰")])]),e._v(" "),t("tr",[t("td",[e._v("allkeys-lru")]),e._v(" "),t("td",[e._v("当"),t("code",[e._v("内存不足")]),e._v("写入新数据时淘汰"),t("code",[e._v("最近最少")]),e._v("使用的Key")])]),e._v(" "),t("tr",[t("td",[e._v("allkeys-random")]),e._v(" "),t("td",[e._v("当"),t("code",[e._v("内存不足")]),e._v("写入新数据时"),t("code",[e._v("随机选择")]),e._v("key淘汰")])]),e._v(" "),t("tr",[t("td",[e._v("allkeys-lfu（4.0版本）")]),e._v(" "),t("td",[e._v("当"),t("code",[e._v("内存不足")]),e._v("写入新数据时移除"),t("code",[e._v("最不经常使用")]),e._v("的Key")])]),e._v(" "),t("tr",[t("td",[e._v("no-eviction（禁止驱逐数据）")]),e._v(" "),t("td",[e._v("当"),t("code",[e._v("内存不足")]),e._v("写入新数据时，写入操作会报错，同时不删除数据")])])])]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("volatile为前缀的策略都是从已过期的数据集中进行淘汰。")]),e._v(" "),t("li",[e._v("allkeys为前缀的策略都是面向所有key进行淘汰。")]),e._v(" "),t("li",[e._v("LRU（least recently used）最少最近用到的。")]),e._v(" "),t("li",[e._v("LFU（Least Frequently Used）最不常用的。")]),e._v(" "),t("li",[e._v("TTL（Time To Live）")]),e._v(" "),t("li",[e._v("它们的触发条件都是Redis使用的内存达到阈值时。")])])]),e._v(" "),t("h3",{attrs:{id:"_7-2-淘汰机制的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-淘汰机制的实现"}},[e._v("#")]),e._v(" 7.2 淘汰机制的实现")]),e._v(" "),t("p",[e._v("既然是淘汰，那就需要把这些数据给删除，然后保存新的。Redis 删除失效主键的方法主要有两种：")]),e._v(" "),t("h4",{attrs:{id:"消极方法-passive-way"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消极方法-passive-way"}},[e._v("#")]),e._v(" 消极方法( passive way)")]),e._v(" "),t("p",[e._v("在主键被访问时如果发现它已经失效,那么就删除它。 redis在实现"),t("code",[e._v("GET")]),e._v("、"),t("code",[e._v("MGET")]),e._v("、"),t("code",[e._v("HGET")]),e._v("、 LRANGE等所有涉及到读取数据的命令时都会调"),t("code",[e._v("expirelfNeeded")]),e._v(",它存在的意义就是在读取数据之前先检查一下它有没有失效,如果失效了就删除")]),e._v(" "),t("p",[t("code",[e._v("expirelfNeeded")]),e._v("函数中调用的另外一个函数 "),t("code",[e._v("propagateExpire")]),e._v(",这个函数用来在正式删除"),t("code",[e._v("失效主键")]),e._v(",并且"),t("code",[e._v("广播")]),e._v("告诉其他地方,目的地有俩")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("code",[e._v("AOF")]),e._v("文件,将删除失效主键的这一操作以 DEL Key的标准命令格式记录下来")]),e._v(" "),t("li",[e._v("另一个就是发送到当前 Redis服务器的所有 "),t("code",[e._v("Slave")]),e._v(",同样将删除失效主键的这操作以 "),t("code",[e._v("DEL Key")]),e._v("的标准命令格式告知这些"),t("code",[e._v("Slave")]),e._v("删除各自的失效主键")])])]),e._v(" "),t("h4",{attrs:{id:"积极方法-active-way"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#积极方法-active-way"}},[e._v("#")]),e._v(" 积极方法( active way)")]),e._v(" "),t("p",[e._v("周期性地探测,发现失效就删除。消极方法的缺点是,如果keγ迟迟不被访问,就会占用很多内存空间,所以才有积极方式")]),e._v(" "),t("h4",{attrs:{id:"主动删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主动删除"}},[e._v("#")]),e._v(" 主动删除")]),e._v(" "),t("p",[e._v("当內存超过 "),t("code",[e._v("maxmemoryl")]),e._v("限定时,触发主动清理策略,该策略由启动参数的配置决定")]),e._v(" "),t("h2",{attrs:{id:"_8-redis持久化机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-redis持久化机制"}},[e._v("#")]),e._v(" 8. Redis持久化机制")]),e._v(" "),t("blockquote",[t("p",[e._v("怎么保证 redis 挂掉之后再重启数据可以进⾏恢复")])]),e._v(" "),t("p",[e._v("参考")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("https://baijiahao.baidu.com/s?id=1654694618189745916&wfr=spider&for=pc")])])]),e._v(" "),t("p",[e._v("很多时候我们需要持久化数据也就是将内存中的数据写⼊到硬盘⾥⾯，⼤部分原因是为了之后重⽤数据 （⽐如重启机器、机器故障之后恢复数据），或者是为了防⽌系统故障⽽将数据备份到⼀个远程位置。 Redis不同于Memcached的很重⼀点就是，Redis⽀持"),t("code",[e._v("持久化")]),e._v("，⽽且⽀持两种不同的持久化操作。当"),t("code",[e._v("RDB")]),e._v("和"),t("code",[e._v("AOF")]),e._v("文件都存在时，会优先根据"),t("code",[e._v("AOF")]),e._v("文件恢复")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("RDB（Redis DataBase 快照）")]),e._v(" "),t("li",[e._v("AOF（Append Only File）")])])]),e._v(" "),t("h3",{attrs:{id:"_8-1-rdb-redis-database-快照"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-rdb-redis-database-快照"}},[e._v("#")]),e._v(" 8.1 RDB（Redis DataBase 快照）")]),e._v(" "),t("p",[e._v("Redis可以通过创建快照来获得存储在内存⾥⾯的数据在某个时间点上的副本。Redis创建快照之后，可 以对快照进⾏备份，可以将快照复制到其他服务器从⽽创建具有相同数据的服务器副本（Redis主从结 构，主要⽤来提⾼Redis性能），还可以将快照留在原地以便重启服务器的时候使⽤。")]),e._v(" "),t("p",[e._v("优点")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("RDB文件紧凑，全量备份，非常适合用于进行备份和灾难恢复。")]),e._v(" "),t("li",[e._v("在使用bgsave生成RDB文件的时候，redis主进程会fork()一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。")]),e._v(" "),t("li",[e._v("RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。")])])]),e._v(" "),t("p",[e._v("缺点")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("RDB快照是一次"),t("code",[e._v("全量备份")]),e._v("，存储的是内存数据的"),t("code",[e._v("二进制序列化")]),e._v("形式，存储上非常紧凑。当进行快照持久化时，会开启一个子进程专门负责快照持久化，子进程会拥有父进程的"),t("code",[e._v("内存数据")]),e._v("，父进程修改内存子进程"),t("code",[e._v("不会反应")]),e._v("出来，所以在"),t("code",[e._v("快照持久化期间修改的数据不会被保存")]),e._v("，可能丢失数据。")])])]),e._v(" "),t("p",[e._v("快照持久化是Redis"),t("code",[e._v("默认采⽤")]),e._v("的持久化⽅式,触发方式如下：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("save")]),e._v(" "),t("li",[e._v("bgsave")]),e._v(" "),t("li",[e._v("自动化")])])]),e._v(" "),t("h4",{attrs:{id:"触发方式-save"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#触发方式-save"}},[e._v("#")]),e._v(" 触发方式：save")]),e._v(" "),t("p",[e._v("该命令会阻塞当前Redis服务器，执行save命令期间，Redis不能处理其他命令，直到RDB过程完成为止。具体流程如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:a(687),alt:"save触发方式"}})]),e._v(" "),t("p",[e._v("执行完成时候如果存在老的"),t("code",[e._v("RDB")]),e._v("文件，就把新的替代掉旧的。我们的客户端可能都是几万或者是几十万，这种方式显然不可取。")]),e._v(" "),t("h4",{attrs:{id:"触发方式-bgsave"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#触发方式-bgsave"}},[e._v("#")]),e._v(" 触发方式：bgsave")]),e._v(" "),t("p",[e._v("执行该命令时，Redis会在后台"),t("code",[e._v("异步")]),e._v("进行快照操作，快照同时还可以"),t("code",[e._v("响应客户端请求")]),e._v("。具体流程如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:a(688),alt:"bgsave触发方式"}})]),e._v(" "),t("p",[e._v("具体操作是Redis进程执行"),t("code",[e._v("fork")]),e._v("操作"),t("code",[e._v("创建子进程")]),e._v("，RDB持久化过程由"),t("code",[e._v("子进程负责")]),e._v("，完成后自动结束。阻塞只发生在"),t("code",[e._v("fork")]),e._v("阶段，一般时间很短。基本上 Redis 内部所有的RDB操作都是采用 "),t("code",[e._v("bgsave")]),e._v(" 命令。")]),e._v(" "),t("h4",{attrs:{id:"触发方式-自动触发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#触发方式-自动触发"}},[e._v("#")]),e._v(" 触发方式：自动触发")]),e._v(" "),t("p",[e._v("自动触发是由我们的配置文件来完成的。在"),t("code",[e._v("redis.conf")]),e._v("配置文件中，里面有如下配置，我们可以去设置：")]),e._v(" "),t("p",[t("strong",[e._v("①save")])]),e._v(" "),t("p",[e._v("这里是用来配置触发 Redis的 "),t("code",[e._v("RDB")]),e._v(" 持久化条件，也就是什么时候将内存中的数据保存到硬盘。比如“save m n”。表示m秒内数据集存在n次修改时，自动触发"),t("code",[e._v("bgsave")]),e._v("。")]),e._v(" "),t("p",[e._v("默认如下配置：")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[e._v("save m n\n\n#在"),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("900")]),e._v("秒"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v("分钟"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("之后，如果⾄少有"),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("个key发⽣变化，"),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Redis")]),e._v("就会⾃动触发BGSAVE命令创建快照。\nsave "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("900")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" \n\n#在"),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("300")]),e._v("秒"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("分钟"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("之后，如果⾄少有"),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v("个key发⽣变化，"),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Redis")]),e._v("就会⾃动触发BGSAVE命令创建快照。\nsave "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("300")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(" \n  \n#在"),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v("秒"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("分钟"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("之后，如果⾄少有"),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10000")]),e._v("个key发⽣变化，"),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Redis")]),e._v("就会⾃动触发BGSAVE命令创建快照。\nsave "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10000")]),e._v(" \n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("blockquote",[t("ul",[t("li",[t("code",[e._v("stop-writes-on-bgsave-error")]),e._v(" ：默认值为yes。当启用了RDB且最后一次后台保存数据失败，Redis是否停止接收数据。这会让用户意识到数据没有正确持久化到磁盘上，否则没有人会注意到灾难（disaster）发生了。如果Redis重启了，那么又可以重新开始接收数据了")]),e._v(" "),t("li",[t("code",[e._v("rdbcompression")]),e._v(" ；默认值是yes。对于存储到磁盘中的快照，可以设置是否进行压缩存储。")]),e._v(" "),t("li",[t("code",[e._v("rdbchecksum")]),e._v(" ：默认值是yes。在存储快照后，我们还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。")]),e._v(" "),t("li",[t("code",[e._v("dbfilename")]),e._v(" ：设置快照的文件名，默认是 "),t("code",[e._v("dump.rdb")])]),e._v(" "),t("li",[t("code",[e._v("dir")]),e._v("：设置快照文件的存放路径，这个配置项一定是个目录，而不能是文件名。")])])]),e._v(" "),t("h4",{attrs:{id:"save和bgsave的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#save和bgsave的区别"}},[e._v("#")]),e._v(" save和bgsave的区别")]),e._v(" "),t("p",[t("img",{attrs:{src:a(689),alt:"save和bgsave的区别"}})]),e._v(" "),t("h3",{attrs:{id:"_8-2-aof-append-only-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-aof-append-only-file"}},[e._v("#")]),e._v(" 8.2 AOF（Append Only File）")]),e._v(" "),t("p",[e._v("与"),t("code",[e._v("快照持久化")]),e._v("相⽐，"),t("code",[e._v("AOF持久化")]),e._v(" 的"),t("code",[e._v("实时性")]),e._v("更好，因此已成为主流的持久化⽅案。默认情况下Redis没有 开启"),t("code",[e._v("AOF（append only file）")]),e._v("⽅式的持久化。")]),e._v(" "),t("p",[e._v("可以通过"),t("code",[e._v("appendonly")]),e._v("参数开启：")]),e._v(" "),t("h4",{attrs:{id:"持久化原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#持久化原理"}},[e._v("#")]),e._v(" 持久化原理")]),e._v(" "),t("p",[t("img",{attrs:{src:a(690),alt:"AOF运行原理-创建"}})]),e._v(" "),t("p",[e._v("每当有一个"),t("code",[e._v("写而非读")]),e._v("命令过来时，就直接追加保存在我们的"),t("code",[e._v("AOF")]),e._v("文件中，AOF命令以Redis协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件在后台重写，使得单个AOF文件不至于过大")]),e._v(" "),t("h4",{attrs:{id:"文件重写原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件重写原理"}},[e._v("#")]),e._v(" 文件重写原理")]),e._v(" "),t("p",[e._v("AOF的方式也同时带来了另一个问题。持久化文件会变的越来越大。为了压缩"),t("code",[e._v("AOF")]),e._v("的持久化文件。redis提供了"),t("code",[e._v("bgrewriteaof")]),e._v("命令。将内存中的数据以命令的方式保存到临时文件中，同时会"),t("code",[e._v("fork")]),e._v("出一条"),t("code",[e._v("新进程")]),e._v("来将文件重写。")]),e._v(" "),t("p",[t("img",{attrs:{src:a(691),alt:"bgrewriteaof文件重写原理"}})]),e._v(" "),t("p",[e._v("重写"),t("code",[e._v("AOF")]),e._v("文件的操作，并没有读取旧的"),t("code",[e._v("AOF")]),e._v("文件，而是将整个内存中的数据库内容用命令的方式重写了一个"),t("code",[e._v("新的AOF文件")]),e._v("，这点和"),t("code",[e._v("快照")]),e._v("有点类似。")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[e._v("appendonly yes\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("开启AOF持久化后每执⾏⼀条会更改Redis中的数据的命令，Redis就会将该命令通过"),t("code",[e._v("write")]),e._v("写⼊硬盘中的"),t("code",[e._v("AOF")]),e._v("⽂件，通俗的理解就是"),t("code",[e._v("日志记录")]),e._v("。 "),t("code",[e._v("AOF")]),e._v("⽂件的保存位置和"),t("code",[e._v("RDB")]),e._v("⽂件的位置相同，都是通过"),t("code",[e._v("dir")]),e._v("参数设置的，默认的⽂件名是 "),t("code",[e._v("appendonly.aof")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[e._v("appendfsync always #每次有数据修改发⽣时都会写⼊AOF⽂件"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("这样会严重降低"),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Redis")]),e._v("的速度\n  \nappendfsync everysec #每秒钟同步⼀次，显示地将多个写命令同步到硬盘\n  \nappendfsync no #让操作系统决定何时进⾏同步\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("为了兼顾数据和写⼊性能，⽤户可以考虑 "),t("code",[e._v("appendfsync everysec")]),e._v("选项 ，让Redis每秒同步⼀次AOF⽂ 件，Redis性能⼏乎没受到任何影响。⽽且这样即使出现系统崩溃，⽤户最多只会丢失⼀秒之内产⽣的 数据。当硬盘忙于执⾏写⼊操作的时候，Redis还会优雅的放慢⾃⼰的速度以便适应硬盘的最⼤写⼊速度。")]),e._v(" "),t("h4",{attrs:{id:"修复aof文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修复aof文件"}},[e._v("#")]),e._v(" 修复AOF文件")]),e._v(" "),t("p",[e._v("可以根据文件"),t("code",[e._v("redis-check-aof")]),e._v("文件修复，它会把AOF文件中错误的命令删去，相关命令")]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("redis-check-aof --fix appendonly.aof\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"_8-3-redis-4-0-对于持久化机制的优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-redis-4-0-对于持久化机制的优化"}},[e._v("#")]),e._v(" 8.3 Redis 4.0 对于持久化机制的优化")]),e._v(" "),t("p",[e._v("Redis 4.0 开始⽀持 "),t("code",[e._v("RDB")]),e._v(" 和 "),t("code",[e._v("AOF")]),e._v(" 的"),t("code",[e._v("混合持久化")]),e._v("（默认关闭，可以通过配置项开启）")]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("aof-use-rdbpreamble "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("yes")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("如果把混合持久化打开，"),t("code",[e._v("AOF")]),e._v(" 重写的时候就直接把 "),t("code",[e._v("RDB")]),e._v(" 的内容写到 "),t("code",[e._v("AOF ⽂件开头")]),e._v("。这样做的好处是可 以结合 "),t("code",[e._v("RDB")]),e._v(" 和 "),t("code",[e._v("AOF")]),e._v(" 的优点, 快速加载同时避免丢失过多的数据。当然缺点也是有的， "),t("code",[e._v("AOF")]),e._v(" ⾥⾯的 "),t("code",[e._v("RDB")]),e._v(" 部分是压缩格式不再是 "),t("code",[e._v("AOF")]),e._v(" 格式，可读性较差。")]),e._v(" "),t("p",[e._v("通过这种，"),t("code",[e._v("Redis")]),e._v("会优先载入"),t("code",[e._v("AOF")]),e._v("文件，因为通常情况下"),t("code",[e._v("AOF")]),e._v("文件保存的数据要比"),t("code",[e._v("RDB")]),e._v("完整")]),e._v(" "),t("h2",{attrs:{id:"_9-redis事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-redis事务"}},[e._v("#")]),e._v(" 9. Redis事务")]),e._v(" "),t("p",[e._v("参考")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("https://www.runoob.com/redis/redis-transactions.html")])])]),e._v(" "),t("p",[e._v("Redis 通过 "),t("code",[e._v("MULTI")]),e._v("、"),t("code",[e._v("EXEC")]),e._v("、"),t("code",[e._v("WATCH")]),e._v(" 等命令来实现"),t("code",[e._v("事务(transaction)")]),e._v("功能。Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。")]),e._v(" "),t("h3",{attrs:{id:"_9-1-特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-特点"}},[e._v("#")]),e._v(" 9.1 特点")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("Redis事务没有隔离级别的概念：批量操作在发送 "),t("code",[e._v("EXEC")]),e._v(" 命令前被放入队列缓存，并不会被实际执行，也就不存在事务内的查询要看到事务里的更新，事务外查询不能看到。")]),e._v(" "),t("li",[e._v("Redis事务不保证原子性：Redis中，"),t("code",[e._v("单条命令是原子性执行的")]),e._v("，但事务不保证"),t("code",[e._v("原子性")]),e._v("，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。")]),e._v(" "),t("li",[e._v("在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。")])])]),e._v(" "),t("h3",{attrs:{id:"_9-2-阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-阶段"}},[e._v("#")]),e._v(" 9.2 阶段")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("开始事务。")]),e._v(" "),t("li",[e._v("命令入队。")]),e._v(" "),t("li",[e._v("执行事务。")])])]),e._v(" "),t("h3",{attrs:{id:"_9-3-相关命令参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-相关命令参考"}},[e._v("#")]),e._v(" 9.3 相关命令参考")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("https://www.runoob.com/redis/redis-transactions.html")])])]),e._v(" "),t("h2",{attrs:{id:"_10-缓存雪崩-缓存穿透-缓存击穿"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-缓存雪崩-缓存穿透-缓存击穿"}},[e._v("#")]),e._v(" 10. 缓存雪崩 | 缓存穿透 | 缓存击穿")]),e._v(" "),t("p",[e._v("参考")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("https://blog.csdn.net/fanrenxiang/article/details/80542580")]),e._v(" "),t("li",[e._v("https://www.cnblogs.com/xichji/p/11286443.html")])])]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("缓存穿透")]),e._v("：key对应的数据在数据源并不存在，每次针对此key的请求从"),t("code",[e._v("缓存")]),e._v("获取不到，请求都会到"),t("code",[e._v("数据源")]),e._v("，从而可能"),t("code",[e._v("压垮数据源")]),e._v("。举个例⼦：某个⿊客故意制造我们缓存中不存在的 key 发起⼤量请求，导致⼤量请 求落到数据库，若黑客利用此漏洞进行攻击可能压垮数据库。")]),e._v(" "),t("li",[t("strong",[e._v("缓存击穿")]),e._v("：是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个"),t("code",[e._v("key")]),e._v("在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，这个时候大并发的请求可能会瞬间把后端DB压垮，就像在一个屏障上凿开了一个洞。")]),e._v(" "),t("li",[t("strong",[e._v("缓存雪崩")]),e._v("：当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力，所以，后⾯的请求都会落到数据库上，造成数据库短时间内承受⼤量请求⽽崩掉。")])])]),e._v(" "),t("h3",{attrs:{id:"_10-1-缓存穿透"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-缓存穿透"}},[e._v("#")]),e._v(" 10.1 缓存穿透")]),e._v(" "),t("p",[e._v("缓存穿透说简单点就是⼤量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有 经过缓存这⼀层。举个例⼦：某个⿊客故意制造我们缓存中不存在的 key 发起⼤量请求，导致⼤量请 求落到数据库。")]),e._v(" "),t("h4",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[e._v("#")]),e._v(" 原理")]),e._v(" "),t("p",[e._v("正常缓存处理流程")]),e._v(" "),t("p",[t("img",{attrs:{src:a(692),alt:"缓存处理流程"}})]),e._v(" "),t("p",[e._v("缓存穿透处理流程")]),e._v(" "),t("p",[t("img",{attrs:{src:a(693),alt:"缓存穿透处理流程"}})]),e._v(" "),t("h4",{attrs:{id:"解决办法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决办法"}},[e._v("#")]),e._v(" 解决办法")]),e._v(" "),t("p",[e._v("一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。")]),e._v(" "),t("p",[e._v("最基本的就是⾸先做好"),t("code",[e._v("参数校验")]),e._v("，⼀些"),t("code",[e._v("不合法的参数")]),e._v("请求直接抛出异常信息返回给客户端。⽐如查询的 数据库 id 不能⼩于 0、传⼊的邮箱格式不对的时候直接返回错误消息给客户端等等。")]),e._v(" "),t("p",[e._v("如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟")]),e._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("getObjectInclNullById")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Integer")]),e._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 从缓存中获取数据")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" cacheValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" cache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 缓存为空")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("cacheValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 从数据库中获取")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" storageValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" storage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 缓存空对象")]),e._v("\n cache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" storageValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 如果存储数据为空，需要设置⼀个过期时间(300秒)")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("storageValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 必须设置过期时间，否则有被攻击的⻛险")]),e._v("\n cache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("expire")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" storageValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" cacheValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br")])]),t("h4",{attrs:{id:"布隆过滤器-bloom-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器-bloom-filter"}},[e._v("#")]),e._v(" 布隆过滤器（bloom filter）")]),e._v(" "),t("p",[e._v("参考")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("https://github.com/Snailclimb/JavaGuide/blob/master/docs/dataStructures-algorithms/data-structure/bloom-filter.md")])])]),e._v(" "),t("p",[e._v("布隆过滤器是⼀个⾮常神奇的数据结构，通过它我们可以⾮常⽅便地判断⼀个给定数 据是否存在与海量数据中。我们需要的就是判断 "),t("code",[e._v("key")]),e._v(" 是否合法，有没有感觉布隆过滤器就是我们想要 找的那个“⼈”。具体是这样做的：把"),t("code",[e._v("所有可能存在的请求的值")]),e._v("都存放在布隆过滤器中，当⽤户请求过来，我会先判断⽤户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信 息给客户端，存在的话才会⾛下⾯的流程。")]),e._v(" "),t("p",[t("img",{attrs:{src:a(694),alt:"布隆过滤器"}})]),e._v(" "),t("h3",{attrs:{id:"_10-2-缓存击穿"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-缓存击穿"}},[e._v("#")]),e._v(" 10.2 缓存击穿")]),e._v(" "),t("p",[e._v("参考")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("https://www.cnblogs.com/chengege/p/11073166.html")])])]),e._v(" "),t("p",[e._v("key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。")]),e._v(" "),t("h4",{attrs:{id:"互斥锁-mutex-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#互斥锁-mutex-key"}},[e._v("#")]),e._v(" 互斥锁(mutex key)")]),e._v(" "),t("p",[e._v("业界比较常用的做法，是使用"),t("code",[e._v("mutex")]),e._v("。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去"),t("code",[e._v("load db")]),e._v("，而是先使用缓存工具的某些带成功操作返回值的操作（比如"),t("code",[e._v("Redis")]),e._v("的"),t("code",[e._v("SETNX")]),e._v("或者"),t("code",[e._v("Memcache")]),e._v("的"),t("code",[e._v("ADD")]),e._v("）去"),t("code",[e._v("set")]),e._v("一个"),t("code",[e._v("mutex key")]),e._v("，当操作返回成功时，再进行"),t("code",[e._v("load db")]),e._v("的操作并"),t("code",[e._v("回设缓存")]),e._v("；否则，就重试整个"),t("code",[e._v("get")]),e._v("缓存的方法。就是只让一个线程构建"),t("code",[e._v("缓存")]),e._v("，其他线程等待构建缓存的线程执行完，重新从缓存获取数据就可以了。")]),e._v(" "),t("p",[t("img",{attrs:{src:a(695),alt:"缓存击穿-互斥锁mutex-key"}})]),e._v(" "),t("h3",{attrs:{id:"_10-3-缓存雪崩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-缓存雪崩"}},[e._v("#")]),e._v(" 10.3 缓存雪崩")]),e._v(" "),t("p",[e._v("简介：缓存同⼀时间⼤⾯积的失效，所以，后⾯的请求都会落到数据库上，造成数据库短时间内承受⼤ 量请求⽽崩掉。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("事前：尽量保证整个 redis 集群的⾼可⽤性，发现机器宕机尽快补上。选择合适的内存淘汰策 略。")]),e._v(" "),t("li",[e._v("事中：本地ehcache缓存 + hystrix限流&降级，避免MySQL崩掉")]),e._v(" "),t("li",[e._v("事后：利⽤ redis 持久化机制保存的数据尽快恢复缓存")])])]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("设置key永不失效（热点数据）；")]),e._v(" "),t("li",[e._v("设置key缓存失效时候尽可能错开；")]),e._v(" "),t("li",[e._v("使用多级缓存机制，比如同时使用redsi和memcache缓存，请求->redis->memcache->db；")]),e._v(" "),t("li",[e._v("购买第三方可靠性高的Redis云服务器；")])])]),e._v(" "),t("p",[t("img",{attrs:{src:a(696),alt:"缓存雪崩解决方案"}})]),e._v(" "),t("h2",{attrs:{id:"_11-如何解决-redis-的并发竞争-key-问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-如何解决-redis-的并发竞争-key-问题"}},[e._v("#")]),e._v(" 11. 如何解决 Redis 的并发竞争 Key 问题")]),e._v(" "),t("p",[e._v("参考")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("https://www.jianshu.com/p/41d3a673425d")]),e._v(" "),t("li",[e._v("https://blog.csdn.net/qq_42253147/article/details/94446727")])])]),e._v(" "),t("p",[e._v("这里的并发指的是多个redis的client同时set key引起的并发问题，也就是多个系统同时对⼀个 key 进⾏操作，但是最后执⾏的顺序 和我们期望的顺序不同，这样也就导致了结果的不同！")]),e._v(" "),t("p",[e._v("方案")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[e._v("分布式锁+时间戳")])]),e._v(" "),t("li",[t("strong",[e._v("消息队列MQ")])])])]),e._v(" "),t("h3",{attrs:{id:"_11-1-分布式锁-时间戳"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-分布式锁-时间戳"}},[e._v("#")]),e._v(" 11.1 分布式锁+时间戳")]),e._v(" "),t("h4",{attrs:{id:"如果对这个key操作-不要求顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如果对这个key操作-不要求顺序"}},[e._v("#")]),e._v(" 如果对这个key操作，不要求顺序")]),e._v(" "),t("p",[e._v("这种情况下，准备一个分布式锁，大家去抢锁，抢到锁就做"),t("code",[e._v("set")]),e._v("操作即可，比较简单。加锁的目的实际上就是把"),t("code",[e._v("并行读写")]),e._v("改成"),t("code",[e._v("串行读写")]),e._v("的方式，从而来避免资源竞争。")]),e._v(" "),t("h4",{attrs:{id:"如果对这个key操作-要求顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如果对这个key操作-要求顺序"}},[e._v("#")]),e._v(" 如果对这个key操作，要求顺序")]),e._v(" "),t("p",[e._v("假设有一个"),t("code",[e._v("key1")])]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("系统A需要将key1设置为valueA")]),e._v(" "),t("li",[e._v("系统B需要将key1设置为valueB")]),e._v(" "),t("li",[e._v("系统C需要将key1设置为valueC")])])]),e._v(" "),t("p",[e._v("期望按照key1的value值按照 "),t("code",[e._v("valueA–>valueB–>valueC")]),e._v("的顺序变化。这种时候我们在数据写入数据库的时候，需要保存一个"),t("code",[e._v("时间戳")]),e._v("。假设"),t("code",[e._v("时间戳")]),e._v("如下")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("系统A key 1 {valueA 3:00}")]),e._v(" "),t("li",[e._v("系统B key 1 {valueB 3:05}")]),e._v(" "),t("li",[e._v("系统C key 1 {valueC 3:10}")])])]),e._v(" "),t("p",[e._v("那么，假设这会"),t("code",[e._v("系统B")]),e._v("先抢到锁，将"),t("code",[e._v("key1")]),e._v("设置为"),t("code",[e._v("{valueB 3:05}")]),e._v("。接下来系统A抢到锁，发现自己的valueA的时间戳早于缓存中的时间戳，那就不做"),t("code",[e._v("set")]),e._v("操作了。以此类推")]),e._v(" "),t("h4",{attrs:{id:"什么是分布式锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是分布式锁"}},[e._v("#")]),e._v(" 什么是分布式锁")]),e._v(" "),t("p",[e._v("因为传统的加锁的做法（如java的synchronized和Lock）这里没用，只适合单点。因为这是分布式环境，需要的是分布式锁。")]),e._v(" "),t("p",[e._v("当然，分布式锁可以基于很多种方式实现，比如zookeeper、redis等，")]),e._v(" "),t("p",[e._v("不管哪种方式实现，基本原理是不变的："),t("strong",[e._v("用一个状态值表示锁，对锁的占用和释放通过状态值来标识")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"分布式锁的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁的实现"}},[e._v("#")]),e._v(" 分布式锁的实现")]),e._v(" "),t("p",[e._v("主要用到的redis函数是"),t("code",[e._v("setnx()")])]),e._v(" "),t("p",[e._v("利用"),t("code",[e._v("SETNX")]),e._v("非常简单地实现"),t("code",[e._v("分布式锁")]),e._v("。例如：某客户端要获得一个名字"),t("code",[e._v("youzhi")]),e._v("的锁，客户端使用下面的命令进行获取：")]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("SETNX lock.youzhi"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("current Unix "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("time")]),e._v(" + lock "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("timeout")]),e._v(" + "),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("1")]),e._v(">")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("blockquote",[t("ul",[t("li",[e._v("如返回1，则该客户端获得锁，把"),t("code",[e._v("lock.youzhi")]),e._v("的键值设置为时间值表示该键已被锁定，该客户端最后可以通过"),t("code",[e._v("DEL lock.foo")]),e._v("来释放该锁。")]),e._v(" "),t("li",[e._v("如返回0，表明该锁已被其他客户端取得，这时我们可以先返回或进行重试等对方完成或等待锁超时。")])])]),e._v(" "),t("h3",{attrs:{id:"_11-2-消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-消息队列"}},[e._v("#")]),e._v(" 11.2 消息队列")]),e._v(" "),t("p",[e._v("在并发量过大的情况下,可以通过"),t("code",[e._v("消息中间件")]),e._v("进行处理,把"),t("code",[e._v("并行读写")]),e._v("进行"),t("code",[e._v("串行化")]),e._v("。")]),e._v(" "),t("p",[e._v("把"),t("code",[e._v("Redis.set")]),e._v("操作放在队列中使其串行化,必须的一个一个执行。")]),e._v(" "),t("p",[e._v("这种方式在一些高并发的场景中算是一种通用的解决方案。")]),e._v(" "),t("h2",{attrs:{id:"_12-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-区别"}},[e._v("#")]),e._v(" 12. 区别")]),e._v(" "),t("h3",{attrs:{id:"_12-1-redis-和-memcached-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-1-redis-和-memcached-的区别"}},[e._v("#")]),e._v(" 12.1 redis 和 memcached 的区别")]),e._v(" "),t("blockquote",[t("ol",[t("li",[t("strong",[e._v("redis⽀持更丰富的数据类型（⽀持更复杂的应⽤场景）")]),e._v("：Redis不仅仅⽀持简单的k/v类型的数 据，同时还提供list，set，zset，hash等数据结构的存储。memcache⽀持简单的数据类型， String。")]),e._v(" "),t("li",[t("strong",[e._v("Redis⽀持数据的持久化")]),e._v("：可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进⾏使 ⽤,⽽Memecache把数据全部存在内存之中。")]),e._v(" "),t("li",[t("strong",[e._v("集群模式")]),e._v("：memcached没有原⽣的集群模式，需要依靠客户端来实现往集群中分⽚写⼊数据；但 是 redis ⽬前是原⽣⽀持 cluster 模式的.")]),e._v(" "),t("li",[e._v("Memcached是多线程，⾮阻塞IO复⽤的⽹络模型；Redis使⽤单线程的多路 IO 复⽤模型。")])])]),e._v(" "),t("p",[t("img",{attrs:{src:a(697),alt:""}})])])}),[],!1,null,null,null);s.default=_.exports}}]);