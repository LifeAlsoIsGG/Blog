(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{625:function(t,e,v){t.exports=v.p+"assets/img/Class_use_1.3615059e.png"},626:function(t,e,v){t.exports=v.p+"assets/img/Class_use_2.7162a45b.png"},627:function(t,e,v){t.exports=v.p+"assets/img/Class_use_3.771f4a20.png"},628:function(t,e,v){t.exports=v.p+"assets/img/get_methods_1.c0fd3134.png"},629:function(t,e,v){t.exports=v.p+"assets/img/get_methods_2.ced20db1.png"},807:function(t,e,v){"use strict";v.r(e);var _=v(2),r=Object(_.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("https://blog.csdn.net/huangliniqng/article/details/88554510")]),t._v(" "),_("li",[t._v("https://www.jianshu.com/p/9be58ee20dee")])])]),t._v(" "),_("h1",{attrs:{id:"定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),_("p",[t._v("JAVA反射机制是在运行状态中")]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("对于任意一个类，都能够知道这个类的所有属性和方法；")]),t._v(" "),_("li",[t._v("对于任意一个对象，都能够调用它的任意方法和属性；")])])]),t._v(" "),_("p",[t._v("这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。")]),t._v(" "),_("h1",{attrs:{id:"用途"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[t._v("#")]),t._v(" 用途")]),t._v(" "),_("p",[t._v("参考")]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("https://www.jianshu.com/p/3fd80b251399")])])]),t._v(" "),_("p",[t._v("在日常的第三方应用开发过程中，经常会遇到某个类的某个成员变量、方法或是属性是私有的或是只对系统应用开放，这时候就可以利用Java的反射机制通过反射来获取所需的私有成员或是方法。当然，也不是所有的都适合反射，之前就遇到一个案例，通过反射得到的结果与预期不符。阅读源码发现，经过层层调用后在最终返回结果的地方对应用的权限进行了校验，对于没有权限的应用返回值是没有意义的缺省值，否则返回实际值起到保护用户的隐私目的。")]),t._v(" "),_("h1",{attrs:{id:"反射机制的相关类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#反射机制的相关类"}},[t._v("#")]),t._v(" 反射机制的相关类")]),t._v(" "),_("p",[t._v("类名 用途   Class类 代表类的实体，在运行的Java应用程序中表示类和接口  Field类 代表类的成员变量（成员变量也称为类的属性）  Method类 代表类的方法  Constructor类 代表类的构造方法")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[t._v("类名")])]),t._v(" "),_("th",[_("strong",[t._v("用途")])])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Class类")]),t._v(" "),_("td",[t._v("代表类的实体，在运行的Java应用程序中表示类和接口")])]),t._v(" "),_("tr",[_("td",[t._v("Field类")]),t._v(" "),_("td",[t._v("代表类的成员变量（成员变量也称为类的属性）")])]),t._v(" "),_("tr",[_("td",[t._v("Method类")]),t._v(" "),_("td",[t._v("代表类的方法")])]),t._v(" "),_("tr",[_("td",[t._v("Constructor类")]),t._v(" "),_("td",[t._v("代表类的构造方法")])])])]),t._v(" "),_("h2",{attrs:{id:"class类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#class类"}},[t._v("#")]),t._v(" Class类")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://developer.android.google.cn/reference/java/lang/Class",target:"_blank",rel:"noopener noreferrer"}},[t._v("Class"),_("OutboundLink")],1),t._v("代表类的实体，在运行的Java应用程序中表示类和接口。在这个类中提供了很多有用的方法，这里对他们简单的分类介绍。")]),t._v(" "),_("h3",{attrs:{id:"例子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),_("p",[_("img",{attrs:{src:v(625),alt:""}})]),t._v(" "),_("p",[_("img",{attrs:{src:v(626),alt:""}})]),t._v(" "),_("p",[_("img",{attrs:{src:v(627),alt:""}})]),t._v(" "),_("h3",{attrs:{id:"获得类相关的方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#获得类相关的方法"}},[t._v("#")]),t._v(" 获得类相关的方法")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("asSubclass(Class<U> clazz)")]),t._v(" "),_("td",[t._v("把传递的类的对象转换成代表其子类的对象")])]),t._v(" "),_("tr",[_("td",[t._v("Cast")]),t._v(" "),_("td",[t._v("把对象转换成代表类或是接口的对象")])]),t._v(" "),_("tr",[_("td",[t._v("getClassLoader()")]),t._v(" "),_("td",[t._v("获得类的加载器")])]),t._v(" "),_("tr",[_("td",[t._v("getClasses()")]),t._v(" "),_("td",[t._v("返回一个数组，数组中包含该类中所有公共类和接口类的对象")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredClasses()")]),t._v(" "),_("td",[t._v("返回一个数组，数组中包含该类中所有类和接口类的对象")])]),t._v(" "),_("tr",[_("td",[t._v("forName(String className)")]),t._v(" "),_("td",[t._v("根据类名返回类的对象")])]),t._v(" "),_("tr",[_("td",[t._v("getName()")]),t._v(" "),_("td",[t._v("获得类的完整路径名字")])]),t._v(" "),_("tr",[_("td",[t._v("newInstance()")]),t._v(" "),_("td",[t._v("创建类的实例")])]),t._v(" "),_("tr",[_("td",[t._v("getPackage()")]),t._v(" "),_("td",[t._v("获得类的包")])]),t._v(" "),_("tr",[_("td",[t._v("getSimpleName()")]),t._v(" "),_("td",[t._v("获得类的名字")])]),t._v(" "),_("tr",[_("td",[t._v("getSuperclass()")]),t._v(" "),_("td",[t._v("获得当前类继承的父类的名字")])]),t._v(" "),_("tr",[_("td",[t._v("getInterfaces()")]),t._v(" "),_("td",[t._v("获得当前类实现的类或是接口")])])])]),t._v(" "),_("h3",{attrs:{id:"获得类中构造器相关的方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#获得类中构造器相关的方法"}},[t._v("#")]),t._v(" 获得类中构造器相关的方法")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("getConstructor(Class...<?> parameterTypes)")]),t._v(" "),_("td",[t._v("获得该类中与参数类型匹配的公有构造方法")])]),t._v(" "),_("tr",[_("td",[t._v("getConstructors()")]),t._v(" "),_("td",[t._v("获得该类的所有公有构造方法")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredConstructor(Class...<?> parameterTypes)")]),t._v(" "),_("td",[t._v("获得该类中与参数类型匹配的构造方法")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredConstructors()")]),t._v(" "),_("td",[t._v("获得该类所有构造方法")])])])]),t._v(" "),_("h3",{attrs:{id:"获得类中方法相关的方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#获得类中方法相关的方法"}},[t._v("#")]),t._v(" 获得类中方法相关的方法")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("getMethod(String name, Class...<?> parameterTypes)")]),t._v(" "),_("td",[t._v("获得该类某个公有的方法")])]),t._v(" "),_("tr",[_("td",[t._v("getMethods()")]),t._v(" "),_("td",[t._v("获得该类所有公有的方法")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredMethod(String name, Class...<?> parameterTypes)")]),t._v(" "),_("td",[t._v("获得该类某个方法")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredMethods()")]),t._v(" "),_("td",[t._v("获得该类所有方法")])])])]),t._v(" "),_("h3",{attrs:{id:"类中其他重要的方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类中其他重要的方法"}},[t._v("#")]),t._v(" 类中其他重要的方法")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("isAnnotation()")]),t._v(" "),_("td",[t._v("如果是注解类型则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isAnnotationPresent(Class<? extends Annotation> annotationClass)")]),t._v(" "),_("td",[t._v("如果是指定类型注解类型则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isAnonymousClass()")]),t._v(" "),_("td",[t._v("如果是匿名类则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isArray()")]),t._v(" "),_("td",[t._v("如果是一个数组类则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isEnum()")]),t._v(" "),_("td",[t._v("如果是枚举类则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isInstance(Object obj)")]),t._v(" "),_("td",[t._v("如果obj是该类的实例则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isInterface()")]),t._v(" "),_("td",[t._v("如果是接口类则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isLocalClass()")]),t._v(" "),_("td",[t._v("如果是局部类则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isMemberClass()")]),t._v(" "),_("td",[t._v("如果是内部类则返回true")])])])]),t._v(" "),_("h2",{attrs:{id:"field类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#field类"}},[t._v("#")]),t._v(" Field类")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://developer.android.google.cn/reference/java/lang/reflect/Field",target:"_blank",rel:"noopener noreferrer"}},[t._v("Field"),_("OutboundLink")],1),t._v("代表类的成员变量（成员变量也称为类的属性）。")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("equals(Object obj)")]),t._v(" "),_("td",[t._v("属性与obj相等则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("get(Object obj)")]),t._v(" "),_("td",[t._v("获得obj中对应的属性值")])]),t._v(" "),_("tr",[_("td",[t._v("set(Object obj, Object value)")]),t._v(" "),_("td",[t._v("设置obj中对应属性值")])])])]),t._v(" "),_("h2",{attrs:{id:"method类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#method类"}},[t._v("#")]),t._v(" Method类")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://developer.android.google.cn/reference/java/lang/reflect/Method",target:"_blank",rel:"noopener noreferrer"}},[t._v("Method"),_("OutboundLink")],1),t._v("代表类的方法。")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("invoke(Object obj, Object... args)")]),t._v(" "),_("td",[t._v("传递object对象及参数调用该对象对应的方法")])])])]),t._v(" "),_("p",[_("img",{attrs:{src:v(628),alt:""}})]),t._v(" "),_("p",[_("img",{attrs:{src:v(629),alt:""}})]),t._v(" "),_("h2",{attrs:{id:"constructor类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#constructor类"}},[t._v("#")]),t._v(" Constructor类")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://developer.android.google.cn/reference/java/lang/reflect/Constructor",target:"_blank",rel:"noopener noreferrer"}},[t._v("Constructor"),_("OutboundLink")],1),t._v("代表类的构造方法。")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("newInstance(Object... initargs)")]),t._v(" "),_("td",[t._v("根据传递的参数创建类的对象")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);