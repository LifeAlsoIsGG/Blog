(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{845:function(t,a,e){"use strict";e.r(a);var v=e(2),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("参考")]),t._v(" "),e("ul",[e("li",[t._v("https://www.runoob.com/design-pattern/design-pattern-intro.html")]),t._v(" "),e("li",[t._v("http://c.biancheng.net/view/1317.html")]),t._v(" "),e("li",[e("a",{attrs:{href:"TheZen0fDesignPattern_2.pdf"}},[t._v("设计模式之禅")])])])]),t._v(" "),e("h2",{attrs:{id:"_1-总览"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-总览"}},[t._v("#")]),t._v(" 1. 总览")]),t._v(" "),e("p",[t._v("根据设计模式的参考书 "),e("strong",[t._v("Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）")]),t._v(" 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我们还会讨论另一类设计模式：J2EE 设计模式。")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("创建型模式")])]),t._v(" "),e("blockquote",[e("p",[t._v("这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("结构型模式")])]),t._v(" "),e("blockquote",[e("p",[t._v("这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("行为型模式")])]),t._v(" "),e("blockquote",[e("p",[t._v("这些设计模式特别关注对象之间的通信。")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("J2EE 模式")])]),t._v(" "),e("blockquote",[e("p",[t._v("这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。")])])])]),t._v(" "),e("h3",{attrs:{id:"_1-1-创建型模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-创建型模式"}},[t._v("#")]),t._v(" 1.1 创建型模式")]),t._v(" "),e("p",[t._v("这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。")]),t._v(" "),e("div",{staticClass:"custom-block info"},[e("p",{staticClass:"custom-block-title"},[t._v("创建型模式")]),t._v(" "),e("ul",[e("li",[t._v("工厂模式（Factory Pattern）")]),t._v(" "),e("li",[t._v("抽象工厂模式（Abstract Factory Pattern）")]),t._v(" "),e("li",[t._v("单例模式（Singleton Pattern）")]),t._v(" "),e("li",[t._v("建造者模式（Builder Pattern）")]),t._v(" "),e("li",[t._v("原型模式（Prototype Pattern）")])])]),t._v(" "),e("h3",{attrs:{id:"_1-2-结构型模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-结构型模式"}},[t._v("#")]),t._v(" 1.2 结构型模式")]),t._v(" "),e("p",[t._v("这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。")]),t._v(" "),e("div",{staticClass:"custom-block info"},[e("p",{staticClass:"custom-block-title"},[t._v("结构型模式")]),t._v(" "),e("ul",[e("li",[t._v("适配器模式（Adapter Pattern）")]),t._v(" "),e("li",[t._v("桥接模式（Bridge Pattern）")]),t._v(" "),e("li",[t._v("过滤器模式（Filter、Criteria Pattern）")]),t._v(" "),e("li",[t._v("组合模式（Composite Pattern）")]),t._v(" "),e("li",[t._v("装饰器模式（Decorator Pattern）")]),t._v(" "),e("li",[t._v("外观模式（Facade Pattern）")]),t._v(" "),e("li",[t._v("享元模式（Flyweight Pattern）")]),t._v(" "),e("li",[t._v("代理模式（Proxy Pattern）")])])]),t._v(" "),e("h3",{attrs:{id:"_1-3-行为型模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-行为型模式"}},[t._v("#")]),t._v(" 1.3 行为型模式")]),t._v(" "),e("p",[t._v("这些设计模式特别关注对象之间的通信。")]),t._v(" "),e("div",{staticClass:"custom-block info"},[e("p",{staticClass:"custom-block-title"},[t._v("行为型模式")]),t._v(" "),e("ul",[e("li",[t._v("责任链模式（Chain of Responsibility Pattern）")]),t._v(" "),e("li",[t._v("命令模式（Command Pattern）")]),t._v(" "),e("li",[t._v("解释器模式（Interpreter Pattern）")]),t._v(" "),e("li",[t._v("迭代器模式（Iterator Pattern）")]),t._v(" "),e("li",[t._v("中介者模式（Mediator Pattern）")]),t._v(" "),e("li",[t._v("备忘录模式（Memento Pattern）")]),t._v(" "),e("li",[t._v("观察者模式（Observer Pattern）")]),t._v(" "),e("li",[t._v("状态模式（State Pattern）")]),t._v(" "),e("li",[t._v("空对象模式（Null Object Pattern）")]),t._v(" "),e("li",[t._v("策略模式（Strategy Pattern）")]),t._v(" "),e("li",[t._v("模板模式（Template Pattern）")]),t._v(" "),e("li",[t._v("访问者模式（Visitor Pattern）")])])]),t._v(" "),e("h3",{attrs:{id:"_1-4-j2ee-模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-j2ee-模式"}},[t._v("#")]),t._v(" 1.4 J2EE 模式")]),t._v(" "),e("p",[t._v("这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。")]),t._v(" "),e("div",{staticClass:"custom-block info"},[e("p",{staticClass:"custom-block-title"},[t._v("J2EE 模式")]),t._v(" "),e("ul",[e("li",[t._v("MVC 模式（MVC Pattern）")]),t._v(" "),e("li",[t._v("业务代表模式（Business Delegate Pattern）")]),t._v(" "),e("li",[t._v("组合实体模式（Composite Entity Pattern）")]),t._v(" "),e("li",[t._v("数据访问对象模式（Data Access Object Pattern）")]),t._v(" "),e("li",[t._v("前端控制器模式（Front Controller Pattern）")]),t._v(" "),e("li",[t._v("拦截过滤器模式（Intercepting Filter Pattern）")]),t._v(" "),e("li",[t._v("服务定位器模式（Service Locator Pattern）")]),t._v(" "),e("li",[t._v("传输对象模式（Transfer Object Pattern）")])])]),t._v(" "),e("h2",{attrs:{id:"_2-目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-目录"}},[t._v("#")]),t._v(" 2. 目录")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("目录")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/Java/Java-DesignPatterns/Java-DesignPatterns-SixPrinciple.html"}},[t._v("Java模式设计之六大原则")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Java/Java-DesignPatterns/Java-DesignPatterns-CreationalPatterns.html"}},[t._v("Java模式设计之创建型模式")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Java/Java-DesignPatterns/Java-DesignPatterns-StructuralPatterns.html"}},[t._v("Java模式设计之结构型模式")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Java/Java-DesignPatterns/Java-DesignPatterns-BehavioralPatterns.html"}},[t._v("Java模式设计之行为性模式")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/Java/Java-DesignPatterns/Java-DesignPatterns-J2eePattern.html"}},[t._v("Java模式设计之J2EE模式")])],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);