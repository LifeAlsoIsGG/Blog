(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{889:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"java线程同步机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java线程同步机制"}},[t._v("#")]),t._v(" Java线程同步机制")]),t._v(" "),s("h3",{attrs:{id:"同步机制简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步机制简介"}},[t._v("#")]),t._v(" 同步机制简介")]),t._v(" "),s("p",[t._v("对于同一个个许可证所保护的共享数据而言，任何线程访问这些共享数据前必须先持有该许可证。")]),t._v(" "),s("ul",[s("li",[t._v("一个线程只有在持有许可证的情况下才能够对这些共享数据进行访问；")]),t._v(" "),s("li",[t._v("一个许可证一 一次只能够被个线程持有；")]),t._v(" "),s("li",[t._v("许可证的持有线程在其结束对这些共享数据的访问后必须让出（释放） 其持有的许可证， 以便其他线程能够对这些共享数据进行访问。")])]),t._v(" "),s("p",[t._v("一个线程在访间共享数据前必须申请相应的锁（许可证）， 线程的这个动作被称为锁的获得 (Acquire)。一个线程获得某个锁（持有许可证），我们就称该线程为相应锁的持 有线程（线程持有许可证），一个锁一次只能被一个线程持有。锁的持有线程可以对该锁所保护的共享数据进行访问，访问结束后该线程必须释放 (Release) 相应的锁。锁的持有 线程在其获得锁之后和 释放锁之前这段时间内所执行的代码被称为临界区 (Critical Section)。因此，共享数据只允许在临界区内进行访问，临界区一次只能被一个线程执行。")]),t._v(" "),s("h3",{attrs:{id:"临界区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#临界区"}},[t._v("#")]),t._v(" 临界区")]),t._v(" "),s("p",[t._v("锁的持有线程在获得锁之后和释放锁之前这段时间内所执行的代码被称为临界区。共享数据只能在临界区内进行访问，临界区一次只能被一个线程执行。")]),t._v(" "),s("h3",{attrs:{id:"锁简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁简介"}},[t._v("#")]),t._v(" 锁简介")]),t._v(" "),s("p",[t._v("锁具有"),s("code",[t._v("排他性")]),t._v("，一次只能被一个线程持有，被称为"),s("code",[t._v("排它锁")]),t._v("或"),s("code",[t._v("互斥锁")]),t._v("。")]),t._v(" "),s("p",[t._v("按照虚拟机对锁的实现划分，分为")]),t._v(" "),s("ul",[s("li",[t._v("内部锁（Intrinsic Lock）：非公平锁，例如"),s("code",[t._v("sychronized")])]),t._v(" "),s("li",[t._v("显示锁（Explicit Lock）支持"),s("code",[t._v("非公平锁")]),t._v("和"),s("code",[t._v("公平锁")]),t._v("，例如JUC包下的"),s("code",[t._v("Lock")]),t._v("等实现类"),s("code",[t._v("ReentrenLock")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/互斥锁示意图.png",alt:"互斥锁示意图",loading:"lazy"}})]),t._v(" "),s("h2",{attrs:{id:"锁的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁的概念"}},[t._v("#")]),t._v(" 锁的概念")]),t._v(" "),s("h3",{attrs:{id:"可重入性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可重入性"}},[t._v("#")]),t._v(" 可重入性")]),t._v(" "),s("p",[t._v("一个线程在持有一个锁的时候还能够继续成功申请该锁，就称该锁具有可重入性，反之则称为非可重入性。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquireLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("／／申请锁lock\n  ／／省略其他代码\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodB")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("releaseLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("／／释放锁lock\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodB")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquireLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("／／申请锁lock\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("releaseLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("／／释放锁lock\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("方法methodA使用了锁lock，该锁引导的临界区代码又调用了另外一个方法methodB,而方法methodB也使用了lock。那么， 这就产生了一个问题：methodA的执行线程持有锁 lock 的时候调用了methodB, 而methodB执行的时候又去申请锁lock, 而lock此时正被当前线程持有（未被释放）。那么，此时methodB究竟能否获得（申请成功） lock呢？可重入性就描述了这样一个问题。")]),t._v(" "),s("h4",{attrs:{id:"实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),s("p",[t._v("可重入锁可以被理解为一个对象，该对象包含一个"),s("code",[t._v("计数器属性")]),t._v("。计数器属性的初始值为 0, 表示相应的锁还没有被任何线程持有。")]),t._v(" "),s("ul",[s("li",[t._v("每次线程获得一个可重入锁的时候， 该锁的 计数器值会被增加1。")]),t._v(" "),s("li",[t._v("每次一个线程释放锁的时候， 该锁的计数器属性值就会被减1。")])]),t._v(" "),s("p",[t._v("可重入锁的持有线程初次获得该锁时相应的开销相对大，这是因为该锁的持有线程必须与其他线程 ”竞争” 以获得锁。")]),t._v(" "),s("p",[t._v("可重入锁的持有线程继续荻得相应锁所产生的开销要小得 多，这是因为此时Java虚拟机只需要将相应锁的计数器属性值增加1即可以实现锁的获得。")]),t._v(" "),s("h3",{attrs:{id:"锁的粒度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁的粒度"}},[t._v("#")]),t._v(" 锁的粒度")]),t._v(" "),s("p",[t._v("一个锁实例可以保护一个或者多个共享数据，一个实例所保护的共享数据的数量大小就被称为该锁的粒度，锁保护的共享数据越大，我们就称该锁的粒度越粗，反之则称粒度细。")]),t._v(" "),s("h2",{attrs:{id:"锁的开销"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁的开销"}},[t._v("#")]),t._v(" 锁的开销")]),t._v(" "),s("ul",[s("li",[t._v("锁的申请和释放所产生的开销（主要是时间开销）")]),t._v(" "),s("li",[t._v("锁的上下文切换（主要是时间开销）：锁作为一种排他性资源，一旦被争用就可能导致上下文切换，而没有被争用的锁则可能不会导致上下文切换")]),t._v(" "),s("li",[t._v("锁泄露")]),t._v(" "),s("li",[t._v("死锁锁死活锁饿死等线程其他活性故障。")])]),t._v(" "),s("h3",{attrs:{id:"锁泄露"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁泄露"}},[t._v("#")]),t._v(" 锁泄露")]),t._v(" "),s("p",[t._v("锁泄露指一个线程获得该锁之后，由于程序的错误、缺陷导致该锁一直无法被释放而其他线程一直无法获得该锁的现象。因此，锁泄露会导致同步在该锁上的所有线程都无法进展。")]),t._v(" "),s("h2",{attrs:{id:"sychronized-内部锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sychronized-内部锁"}},[t._v("#")]),t._v(" Sychronized（内部锁）")]),t._v(" "),s("h3",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.pdai.tech/md/java/thread/java-thread-x-key-synchronized.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("关键字: synchronized详解"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/zwjyyy1203/article/details/106217887",target:"_blank",rel:"noopener noreferrer"}},[t._v("jvm：ObjectMonitor源码"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/yinwenjie/article/details/84922958",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java并发基石——所谓“阻塞”：Object Monitor和AQS（1）"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/zzti_erlie/article/details/103997713?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.control",target:"_blank",rel:"noopener noreferrer"}},[t._v("锁升级过程"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("p",[t._v("Java平台中的任何一个对象都有唯一一个与之关联的锁。 这种锁被称为"),s("code",[t._v("监视器 (Monitor)")]),t._v("或者"),s("code",[t._v("内部锁 (Intrinsic Lock)")]),t._v("。内部锁是一种"),s("code",[t._v("排他锁")]),t._v("，它能够保障")]),t._v(" "),s("ul",[s("li",[t._v("原子性")]),t._v(" "),s("li",[t._v("可见性")]),t._v(" "),s("li",[t._v("有序性")])]),t._v(" "),s("p",[t._v("内部锁是通过 synchronized 关键字实现的。")]),t._v(" "),s("h3",{attrs:{id:"使用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[t._v("#")]),t._v(" 使用方法")]),t._v(" "),s("ul",[s("li",[t._v("synchronized修饰的实例方法：多线程并发访问时，只能有一个线程进入，获得"),s("code",[t._v("对象内置锁")]),t._v("，其他线程阻塞等待，但在此期间线程仍然可以访问其他方法。")]),t._v(" "),s("li",[t._v("synchronized修饰的静态方法：多线程并发访问时，只能有一个线程进入，获得"),s("code",[t._v("类锁")]),t._v("，其他线程阻塞等待，但在此期间线程仍然可以访问其他方法。")]),t._v(" "),s("li",[t._v("synchronized修饰的代码块，：多线程并发访问时，只能有一个线程进入，根据"),s("code",[t._v("括号中的对象或者是类")]),t._v("，获得相应的对象内置锁或者是类锁")]),t._v(" "),s("li",[t._v("同步方法的整个方法体就是一个临界区。")])]),t._v(" "),s("blockquote",[s("p",[t._v("每个类都有一个类锁，类的每个对象也有一个内置锁，它们是互不干扰的，也就是说一个线程可以同时获得"),s("code",[t._v("类锁")]),t._v("和该类实例化"),s("code",[t._v("对象的内置锁")]),t._v("，当线程访问非synchronzied修饰的方法时，并不需要获得锁，因此不会产生阻塞。")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Synchronized")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("锁句柄"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在此代码块访问共享数据")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("synchronized关键字所引导的代码块就是临界区 。锁句柄是一个对象的引用（或者能够返回对象的表达式）。例如，锁句柄可以填写为this 关键字（表示当前对象）。")]),t._v(" "),s("p",[t._v("习惯上我们也直接称锁句柄为锁。锁句柄对应的监视器就被称为相应同步块的引导锁。相应地， 我们称呼相应的同步块为该锁引导的同步块。")]),t._v(" "),s("blockquote",[s("p",[t._v("锁句柄通常采用final修饰（private final）。这是因为锁句柄的值一旦改变，会导致同一个代码块的多个线程实际上使用不同的锁，而导致竞态。")])]),t._v(" "),s("h3",{attrs:{id:"同步静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步静态方法"}},[t._v("#")]),t._v(" 同步静态方法")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedMethodExample")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" sysnchronized "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("staticMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在此访问共享数据")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相当于")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedMethodExample")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("staticMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sysnchronized")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedMethodExample")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在此访问共享数据")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[t._v("线程在执行临界区代码的时候必须持有该临界区的"),s("code",[t._v("引导锁")]),t._v("。一个线程执行到同步代码块必须申请该同步块的引导锁，只有申请成功该锁的线程才能够执行相的应临界区。")]),t._v(" "),s("p",[t._v("一旦执行完临界区代码，引导该临界区的锁就会被自动释放。整个内部锁申请和释放的过程都是由"),s("code",[t._v("java虚拟机")]),t._v("负责实施的，所以synchronized实现的锁被称为"),s("code",[t._v("内部锁")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("内部锁不会导致锁泄露")]),t._v("，java编译器在将同步代码块编译成字节码的时候，对临界区可能抛出的异常（未被捕获）进行了处理，所以即使临界区代码抛出异常也不会妨碍内部锁的释放。")]),t._v(" "),s("h3",{attrs:{id:"内部锁的调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部锁的调度"}},[t._v("#")]),t._v(" 内部锁的调度")]),t._v(" "),s("p",[t._v("概念")]),t._v(" "),s("ul",[s("li",[t._v("监控区（Entry Set）：锁已被其他线程获取，期待获取锁的线程就进入Monitor对象的监控区")]),t._v(" "),s("li",[t._v("待授权区（Wait Set）：曾经获取到锁，但是调用了wait方法，线程进入待授权区")])]),t._v(" "),s("p",[t._v("Java虚拟机会为每个内部锁分配一个"),s("code",[t._v("入口集(Entry List)")]),t._v("， 用于记录等待获得相应内部锁的线程。")]),t._v(" "),s("p",[t._v("多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程（即申请锁的操作成功）， 而其他申请者的申请操作会失败。 这些申请失败的线程并不会抛出异常， 而是会被暂停（生命周期状态变为"),s("code",[t._v("BLOCKED")]),t._v(") 并被存入相应锁的入口集中等待再次申请锁的机会。")]),t._v(" "),s("p",[t._v("入口集中的线程就被称为相应内部锁的等待线程。当这些线程申请的锁被其持有线程释放的时候， "),s("strong",[t._v("该锁的入口集中的一个任意线程会被Java虚拟机唤醒")]),t._v("， 从而得到再次申请锁的机会。")]),t._v(" "),s("p",[t._v("由于Java虚拟机对内部锁的调度"),s("code",[t._v("仅支持非公平调度")]),t._v("， 被唤醒的等待线程占用处理器运行时可能还有其他新的活跃线程 （处于 RUNNABLE状态，且未进入过入口集）与该线程抢占这个被释放锁， 因此被唤醒的线程不一定就能成为该锁的持有 线程。")]),t._v(" "),s("p",[t._v("另外，Java虚拟机如何从一个锁的入口集中选择一个等待线程，作为下一个可以参与再次申请相应锁的线程，这个细节与Java虚拟机的具体实现有关：这个被选中的线程有可能是入口集中等待时间最长的线程， 也可能是等待时间最短的线程，或者完全是随机。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/内部锁状态转换图.png",alt:"img",loading:"lazy"}})]),t._v(" "),s("h3",{attrs:{id:"锁原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁原理"}},[t._v("#")]),t._v(" 锁原理")]),t._v(" "),s("p",[t._v("//TODO:monitor markword objectMonitor")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/Mark Word.png",alt:"img",loading:"lazy"}})]),t._v(" "),s("h3",{attrs:{id:"锁升级过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁升级过程"}},[t._v("#")]),t._v(" 锁升级过程")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://blog.csdn.net/zzti_erlie/article/details/103997713?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.control",target:"_blank",rel:"noopener noreferrer"}},[t._v("锁升级过程"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("https://blog.csdn.net/zwjyyy1203/article/details/106217887")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/锁升级过程.jpg",alt:"preview",loading:"lazy"}})]),t._v(" "),s("h2",{attrs:{id:"lock接口-显示锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lock接口-显示锁"}},[t._v("#")]),t._v(" Lock接口（显示锁）")]),t._v(" "),s("p",[t._v("jdk1.5引入的排他锁，其作用于内部锁相同， 但是它提供了一些内部锁所不具备的特性。显示锁是"),s("code",[t._v("java.util.concurrent.locks.Lock")]),t._v("接口的实例，"),s("code",[t._v("java.util.concurrent.locks.Lock")]),t._v("是它的默认实现类")]),t._v(" "),s("h3",{attrs:{id:"常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("void lock()")]),t._v(" "),s("td",[t._v("获取锁")])]),t._v(" "),s("tr",[s("td",[t._v("void lockInterruptibly()")]),t._v(" "),s("td",[t._v("如果当前线程未被中断，则获取锁")])]),t._v(" "),s("tr",[s("td",[t._v("newCondition()")]),t._v(" "),s("td",[t._v("返回绑定到此Lock实例的新Conditon实例")])]),t._v(" "),s("tr",[s("td",[t._v("tryLock()")]),t._v(" "),s("td",[t._v("仅在调试时锁为空闲状态才获取锁")])]),t._v(" "),s("tr",[s("td",[t._v("tryLock(long time, TimeUnit uinit)")]),t._v(" "),s("td",[t._v("如果说在给定的时间空闲，并且当前线程未被中断，则获取锁")])]),t._v(" "),s("tr",[s("td",[t._v("unlock()")]),t._v(" "),s("td",[t._v("释放锁")])])])]),t._v(" "),s("h3",{attrs:{id:"显示锁的调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显示锁的调度"}},[t._v("#")]),t._v(" 显示锁的调度")]),t._v(" "),s("p",[t._v("可以根据"),s("code",[t._v("ReentrantLock(boolean fail)")]),t._v(" 指定公平和非公平锁，true为公平锁")]),t._v(" "),s("p",[t._v("公平锁保障锁调度的公平性往往是以增加上下文切换为代价的，因此显式锁默认非公平调度策略，适合``````锁被持有时间相对长"),s("code",[t._v("和")]),t._v("线程申请锁的平均间隔时间相对长``的情形。")]),t._v(" "),s("p",[t._v("总的来说，公平锁开销大于非公平锁.")]),t._v(" "),s("h2",{attrs:{id:"synchronized-和-reentrantlock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-和-reentrantlock"}},[t._v("#")]),t._v(" Synchronized 和 ReenTrantLock")]),t._v(" "),s("h3",{attrs:{id:"对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对比"}},[t._v("#")]),t._v(" 对比")]),t._v(" "),s("p",[s("strong",[t._v("1. 锁的实现")])]),t._v(" "),s("p",[t._v("synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。")]),t._v(" "),s("p",[s("strong",[t._v("2. 性能")])]),t._v(" "),s("p",[t._v("新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。")]),t._v(" "),s("p",[s("strong",[t._v("3. 等待可中断")])]),t._v(" "),s("p",[t._v("ReentrantLock 可中断，而 synchronized 不行")]),t._v(" "),s("p",[t._v("当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。")]),t._v(" "),s("p",[s("strong",[t._v("4. 公平锁")])]),t._v(" "),s("p",[t._v("synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。")]),t._v(" "),s("p",[t._v("公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。")]),t._v(" "),s("p",[s("strong",[t._v("5. 锁绑定多个条件")])]),t._v(" "),s("p",[t._v("一个 ReentrantLock 可以同时绑定多个 Condition 对象，通过调用"),s("code",[t._v("newCondition()")]),t._v("方法来创建。")]),t._v(" "),s("p",[s("strong",[t._v("6. 是否可重入")])]),t._v(" "),s("p",[t._v("两者都是可重入锁。")]),t._v(" "),s("p",[t._v("“可重入锁”概念是：自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果不可锁重入的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增1，所以要等到锁的计数器下降为0时才能释放锁。")]),t._v(" "),s("p",[s("strong",[t._v("7. 异常处理&锁泄露")])]),t._v(" "),s("p",[t._v("synchronized 异常就会自动释放锁来避免"),s("code",[t._v("锁泄露")]),t._v("，而 ReenTrantLock 异常需要在 finally 里 unlock。")]),t._v(" "),s("p",[t._v("通过反编译可以看到sychronized有两个释放锁标志"),s("code",[t._v("monitorexit")]),t._v("，最后一个"),s("code",[t._v("monitorexit")]),t._v("是用于如果同步代码块中出现``Exception或者Error"),s("code",[t._v("，则会调用第二个")]),t._v("monitorexit`指令来保证释放锁")]),t._v(" "),s("p",[s("strong",[t._v("8. 灵活性")])]),t._v(" "),s("p",[t._v("内部锁是基于代码块的锁，灵活性较差，要么使用，用么不使用；")]),t._v(" "),s("p",[t._v("而显示锁是基于对象的锁，灵活性强，比如可以在一个方法内申请锁，在另一个方法释放锁，而内部锁是无法做到的。")]),t._v(" "),s("p",[t._v("还有如果一个内部锁的持有线程一直不释放这个锁(这通常是由于代码错误导致的),那 么同步在该锁之上的所有线程就会一直被暂停而使其任务无法进展。而显式锁则可以轻松 地避免这样的问题。Lock接口定义了一个 "),s("code",[t._v("try Lock")]),t._v("方法。该方法的作用是尝试申请相应 Lock实例锁表示的锁。如果相应的锁未被其他任何线程持有,那么该方法会返回true,表 示其获得了相应的锁;否则,该方法并不会导致其执行线程被暂停而是直接返回 false, 表示其未获得相应的锁。更高级可以使用带参数超时等待的try lock方法。")]),t._v(" "),s("p",[s("strong",[t._v("9. 监控定位")])]),t._v(" "),s("p",[t._v("在问题定位方面,尤其是定位生产环境上的问题的时候,"),s("code",[t._v("线程转储( Thread dump 参见第1章)")]),t._v("就像是线程的“工作报告”一样可以告诉我们Java虚拟机中关于线程的详 细信息。")]),t._v(" "),s("p",[t._v("线程转储中会包含内部锁的相关信息,包括一个线程等待哪些锁以及这些锁的当 前(获取相应线程转储那一刻)持有线程。")]),t._v(" "),s("p",[t._v("而在JDK1.5下,线程转储中并不包含显式锁 的相关信息。不过,JDK1.6提供的工具 "),s("code",[t._v("jstack")]),t._v("所产生的线程转储中可以包含显式锁的信 息5。")]),t._v(" "),s("h3",{attrs:{id:"reentrantlock的高级功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock的高级功能"}},[t._v("#")]),t._v(" ReenTrantLock的高级功能")]),t._v(" "),s("p",[t._v("ReenTrantLock 比 synchronized 增加了一些高级功能。主要有三点")]),t._v(" "),s("ol",[s("li",[t._v("等待可中断")]),t._v(" "),s("li",[t._v("可指定公平和非公平锁")]),t._v(" "),s("li",[t._v("可实现选择性通知（锁可以绑定多个条件）")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("ReenTrantLock提供了一种能够中断等待锁的线程的机制")]),t._v("，通过**lock.lockInterruptibly()**来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。")]),t._v(" "),s("li",[s("strong",[t._v("ReenTrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。")]),t._v(" ReenTrantLock默认情况是非公平的，可以通过 ReenTrantLock类的"),s("code",[t._v("ReentrantLock(boolean fair)")]),t._v("构造方法来制定是否是公平的。")]),t._v(" "),s("li",[s("strong",[t._v("synchronized关键字与wait()和notify/notifyAll()方法相结合可以实现等待/通知机制")]),t._v("，ReentrantLock类当然也可以实现，但是需要借助于Condition接口与newCondition() 方法。Condition是JDK1.5之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个Lock对象中可以创建多个Condition实例（即对象监视器），"),s("strong",[t._v("线程对象可以注册在指定的Condition中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用notify/notifyAll()方法进行通知时，被通知的线程是由 JVM 选择的，用ReentrantLock类结合Condition实例可以实现“选择性通知”")]),t._v(" ，这个功能非常重要，而且是Condition接口默认提供的。而synchronized关键字就相当于整个Lock对象中只有一个Condition实例，所有的线程都注册在它一个身上。如果执行notifyAll()方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而Condition实例的signalAll()方法 只会唤醒注册在该Condition实例中的所有等待线程。")])]),t._v(" "),s("p",[t._v("如果你想使用上述功能，那么选择ReenTrantLock是一个不错的选择。")]),t._v(" "),s("h3",{attrs:{id:"使用选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用选择"}},[t._v("#")]),t._v(" 使用选择")]),t._v(" "),s("p",[t._v("除非需要灵活的使用锁，去使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁或锁泄露问题，因为 JVM 会确保锁的释放。")]),t._v(" "),s("p",[t._v("内部锁的优点是简单易用,显式锁的优点是功能强大,这两种锁各自都存在一些弱势。")]),t._v(" "),s("ul",[s("li",[t._v("一般来说,新开发的代码中我们可以选用显式锁。但是选用显式锁的时候需要注意 显式锁的不正确使用会导致锁泄漏这样严重的问题;线程转储可能无法包含显式锁的相关 信息,从而导致问题定位的困难。")]),t._v(" "),s("li",[t._v("另外,我们也可以使用相对保守的策略——默认情况下选用内部锁,仅在需要显式锁 所提供的特性的时候才选用显式锁。比如,在多数线程持有一个锁的时间相对长或者线程 申请锁的平均时间间隔相对长的情况下使用非公平锁是不太恰当的,因此我们可考虑使用 公平锁(显式锁)。")])]),t._v(" "),s("h3",{attrs:{id:"性能已不是选择标准"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能已不是选择标准"}},[t._v("#")]),t._v(" 性能已不是选择标准")]),t._v(" "),s("p",[t._v("在JDK1.6之前，synchronized 的性能是比 ReenTrantLock 差很多。"),s("strong",[t._v("具体表示为：synchronized 关键字吞吐量随线程数的增加，下降得非常严重。而ReenTrantLock 基本保持一个比较稳定的水平")]),t._v("。我觉得这也侧面反映了， synchronized 关键字还有非常大的优化余地。后续的技术发展也证明了这一点，我们上面也讲了在 JDK1.6 之后 JVM 团队对 synchronized 关键字做了很多优化。"),s("strong",[t._v("JDK1.6 之后，synchronized 和 ReenTrantLock 的性能基本是持平了。所以网上那些说因为性能才选择 ReenTrantLock 的文章都是错的！JDK1.6之后，性能已经不是选择synchronized和ReenTrantLock的影响因素了！而且虚拟机在未来的性能改进中会更偏向于原生的synchronized，所以还是提倡在synchronized能满足你的需求的情况下，优先考虑使用synchronized关键字来进行同步！优化后的synchronized和ReenTrantLock一样，在很多地方都是用到了CAS操作")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"锁优化与选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁优化与选择"}},[t._v("#")]),t._v(" 锁优化与选择")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/锁优化.png",alt:"img",loading:"lazy"}})]),t._v(" "),s("h2",{attrs:{id:"改进锁-读写锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#改进锁-读写锁"}},[t._v("#")]),t._v(" 改进锁：读写锁")]),t._v(" "),s("p",[t._v("读写锁( Read/Write Lock)是一种改进型的排他锁,也被称为共享/排他( Shared Exclusive)锁。读写锁允许多个线程可以同时读取(只读)共享变量,但是一次只允许个线程对共享变量进行更新("),s("code",[t._v("包括读取后再更新")]),t._v(")。任何线程读取共享变量的时候,其他 线程无法更新这些变量;一个线程更新共享变量的时候,其他任何线程都无法访问该变量。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/读写锁的两种角色.png",alt:"读写锁的两种角色",loading:"lazy"}})]),t._v(" "),s("p",[t._v("总的来说,"),s("strong",[t._v("读锁之间可以变法访问，读锁和写锁直接互斥，写锁和写锁之间互斥")])]),t._v(" "),s("ul",[s("li",[t._v("读锁对于读线 程来说起到保护其访问的共享变量在其访问期间不被修改的作用,并使多个读线程可以同 时读取这些变量从而提高了并发性;")]),t._v(" "),s("li",[t._v("而写锁保障了写线程能够以独占的方式安全地更新共 享变量。写线程对共享变量的更新对读线程是可见的。")])]),t._v(" "),s("h3",{attrs:{id:"对比-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对比-2"}},[t._v("#")]),t._v(" 对比")]),t._v(" "),s("p",[t._v("与普通的排他锁(如内部锁和 Reentrantlock)相比,读写锁在排他性方面比较弱(这是我们所期望的)。在原子性、可见性和有序性保障方面,它所起到的作用与普通的排他锁是一致的，")]),t._v(" "),s("ul",[s("li",[t._v("写线程"),s("code",[t._v("释放写锁")]),t._v("所起到的作用相当于一个线程释放一个普通排他锁;")]),t._v(" "),s("li",[t._v("读线程"),s("code",[t._v("获得读锁")]),t._v("所起到的作用相当于一个线程获得一个普通排他锁。")])]),t._v(" "),s("h3",{attrs:{id:"适用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[t._v("#")]),t._v(" 适用场景")]),t._v(" "),s("p",[t._v("由于内部实现较为复杂， 只有同时满足下面两个条件的时候,读写锁才是适宜的选择。否则,使用读写锁会得 不偿失(开销)。")]),t._v(" "),s("ul",[s("li",[t._v("只读操作比写(更新)操作要频繁得多")]),t._v(" "),s("li",[t._v("读线程持有锁的时间比较长")])]),t._v(" "),s("h3",{attrs:{id:"读写锁的升级降级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读写锁的升级降级"}},[t._v("#")]),t._v(" 读写锁的升级降级")]),t._v(" "),s("p",[t._v("ReentrantReadWriteLock所实现的读写锁是个"),s("code",[t._v("可重入锁")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("锁降级：支持。即一个线程持有读写锁的"),s("code",[t._v("写锁")]),t._v("的情况下可以继续获得相应的"),s("code",[t._v("读锁")]),t._v("。")]),t._v(" "),s("li",[t._v("锁升级：不支持。目前获取"),s("code",[t._v("读锁")]),t._v("后需要释放"),s("code",[t._v("读锁")]),t._v("才能获取"),s("code",[t._v("写锁")]),t._v("。")])]),t._v(" "),s("p",[s("strong",[t._v("锁降级")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//锁降级")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("downGrade")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" readLockAcquired "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  writeLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在此区域访问(读，写)共享变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当线程在持有写锁的情况下申请读锁readLock")]),t._v("\n    readLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    readLockAcquired "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    writeLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("readLockAcquired"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//读取共享数据")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      readLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br")])]),s("p",[s("strong",[t._v("锁升级")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//锁升级")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("upGrade")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  readLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Must release read lock before acquiring write lock")]),t._v("\n    readLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    writeLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在此区域访问(读，写)共享变量")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"写操作正在执行。。。"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"写操作结束。。。"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      writeLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    readLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br")])]),s("h2",{attrs:{id:"内存屏障"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存屏障"}},[t._v("#")]),t._v(" 内存屏障")]),t._v(" "),s("p",[t._v("可见性的两个动作")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("刷新处理器")]),t._v("：获得锁前，保证了该锁的当前持有线程能够读取到前一个持有线程对这些数\n据所做的更新")]),t._v(" "),s("li",[s("strong",[t._v("冲刷处理器")]),t._v("：释放锁后，保证了该锁的持有线程对这些数据所做的更新对该锁的后续持\n有线程可见")])]),t._v(" "),s("p",[t._v("底层是借助"),s("code",[t._v("内存屏障")]),t._v("实现的上述动作。")]),t._v(" "),s("h3",{attrs:{id:"定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("p",[t._v("内存屏障是对一类仅针对内存读丶写操作指令的跨处理器架构的比较底层的抽象。"),s("code",[t._v("内存屏障")]),t._v("是被插入到"),s("code",[t._v("两个指令之间")]),t._v("使用的，其作用是禁止编译器丶处理器重排序从而保证"),s("code",[t._v("有序性")]),t._v("，但放的位置不同作用也有不同。")]),t._v(" "),s("p",[t._v("它在指令序列(如指令1;指令2;指令3)中就像是一堵墙(因此被称为屏障)一样使其两侧(之前和之后)的指令无法“穿越”它(一旦穿越了就是重排序了)。")]),t._v(" "),s("p",[t._v("但是,为了实现禁止重排序的功能,这些指令也往往具有一个副作用——刷新处理器缓存、冲刷处理器缓存,从而保证可见性。不同微架构的处理器所提供的这样的指令是不同的,并且出于不同的目的使用的相应指令也是不同的。")]),t._v(" "),s("h3",{attrs:{id:"按可见性保障划分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按可见性保障划分"}},[t._v("#")]),t._v(" 按可见性保障划分")]),t._v(" "),s("ul",[s("li",[t._v("加载屏障：刷新处理器缓存")]),t._v(" "),s("li",[t._v("存储屏障：冲刷处理器缓存")])]),t._v(" "),s("h4",{attrs:{id:"加载屏障"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载屏障"}},[t._v("#")]),t._v(" 加载屏障")]),t._v(" "),s("ul",[s("li",[t._v("用法：Java虚拟机会在 "),s("code",[t._v("Monitorenter(申请锁)")]),t._v("对应的机器码指令之后"),s("code",[t._v("临界区开始之前")]),t._v("的地方插人一个"),s("code",[t._v("加载屏障")]),t._v("。")]),t._v(" "),s("li",[t._v("作用：这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。")])]),t._v(" "),s("h4",{attrs:{id:"存储屏障"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储屏障"}},[t._v("#")]),t._v(" 存储屏障")]),t._v(" "),s("ul",[s("li",[t._v("用法：Java虚拟机会在 "),s("code",[t._v("MonitorExit(释放锁)")]),t._v("对应的"),s("code",[t._v("机器码指令之后")]),t._v("插入一个"),s("code",[t._v("存储屏障")])]),t._v(" "),s("li",[t._v("作用：这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程的执行处理器来说是可同步的")])]),t._v(" "),s("p",[s("strong",[t._v("因此,可见性的保障是通过写线程和读线程成对地使用"),s("code",[t._v("存储屏障")]),t._v("和"),s("code",[t._v("加载屏障")]),t._v("实现的。")])]),t._v(" "),s("p",[t._v("这有点像高考成绩查询:高考阅卷完毕之后虽然每个考生的分数都已经确定,但是这些分数对于考生来说仍然是未知的。只有当分数公布的时候,考生才能够去查询自己的分数。这里")]),t._v(" "),s("ul",[s("li",[t._v("考试成绩就相当于阅卷方和考生之间需要共享的数据:")]),t._v(" "),s("li",[t._v("阅卷方公布成绩相当于执行存储屏障,它使得考生的分数可以被查询;")]),t._v(" "),s("li",[t._v("考生查询其考试成绩相当于执行加载屏障,它使得考生可以得知自己的考试成绩")])]),t._v(" "),s("h3",{attrs:{id:"按有序性保障划分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按有序性保障划分"}},[t._v("#")]),t._v(" 按有序性保障划分")]),t._v(" "),s("ul",[s("li",[t._v("获取屏障")]),t._v(" "),s("li",[t._v("释放屏障")])]),t._v(" "),s("h4",{attrs:{id:"获取屏障"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取屏障"}},[t._v("#")]),t._v(" 获取屏障")]),t._v(" "),s("ul",[s("li",[t._v("用法：Java虚拟机会在 "),s("code",[t._v("Monitorenter之后")]),t._v("(它包含了读操作)和"),s("code",[t._v("临界区开始之前")]),t._v("的地方插人一个"),s("code",[t._v("获取屏障")])]),t._v(" "),s("li",[t._v("作用：其作用是禁止该读操作与其后的任何读写操作之间进行"),s("code",[t._v("重排序")]),t._v("，这相当于在进行后续操作"),s("code",[t._v("之前")]),t._v("先要获得相应共享数据的"),s("code",[t._v("所有权")]),t._v("(这也是该屏障的名称来源)，"),s("code",[t._v("获取屏障")]),t._v("禁止了临界区中的任何读、写操作被重排序到"),s("code",[t._v("临界区之前")]),t._v("的可能性,")])]),t._v(" "),s("h4",{attrs:{id:"释放屏障"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#释放屏障"}},[t._v("#")]),t._v(" 释放屏障")]),t._v(" "),s("ul",[s("li",[t._v("用法："),s("code",[t._v("Monitorexit之前")]),t._v("(它包含了写操作)和"),s("code",[t._v("临界区之后")]),t._v("的地方插入一个"),s("code",[t._v("释放屏障")]),t._v("。")]),t._v(" "),s("li",[t._v("作用：禁止该写操作与其前面的任何读写操作之间进行"),s("code",[t._v("重排序")]),t._v("，这相当于在对相应共享数据"),s("code",[t._v("操作结束后")]),t._v("释放所有权(这也是该屏障的名称来源)，"),s("code",[t._v("释放屏障")]),t._v("又禁止了临界区中的任何读、写操作被重排序到"),s("code",[t._v("临界区之后")]),t._v("的可能性。")])]),t._v(" "),s("p",[t._v("因此,这两种屏障就像是三明治的两层面包片把火腿夹住一样把临界区中 的代码(指令序列)包括起来,如图3-4所示")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/内存屏障在锁中的使用.png",alt:"内存屏障在锁中的使用",loading:"lazy"}})]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("因此临界 区内的任何读、写操作都无法被重排序到临界区之外。在锁的排他性的作用下,这使得临 界区中执行的操作序列具有"),s("code",[t._v("原子性")]),t._v("。因此,写线程在临界区中对各个共享变量所做的更新 会同时对读线程可见,即在读线程看来各个共享变量就像是“一下子”被更新的,于是这 些线程无从(也无必要)区分这些共享变量是以何种顺序被更新的。这使得写线程在临界 区中执行的操作自然而然地具有有序性—读线程对这些操作的感知顺序与源代码顺序一致")]),t._v(" "),s("p",[s("strong",[t._v("可见,锁对有序性的保障是通过写线程和读线程配对使用释放屏障与加载屏障实现的")])]),t._v(" "),s("h2",{attrs:{id:"轻量级同步机制-volatile关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#轻量级同步机制-volatile关键字"}},[t._v("#")]),t._v(" 轻量级同步机制：volatile关键字")]),t._v(" "),s("h3",{attrs:{id:"定义-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义-2"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("p",[t._v("volatile字面有“易挥发”的意思,引申开来就是有“不稳定”的意思。")]),t._v(" "),s("p",[t._v("volatile关键字用于修饰共享可变变量,即没有使用 "),s("code",[t._v("final")]),t._v("关键字修饰的实例变量或静态变量,如下所示")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" logLevel\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("volatile关键字表示被修饰的变量的值容易变化(即被其他线程更改),因而不稳定。")]),t._v(" "),s("li",[t._v("volatile变量的不稳定性意味着对这种变量的读和写操作都必须从"),s("code",[t._v("高速缓存")]),t._v("或者"),s("code",[t._v("主内存")]),t._v(" （也是通过高速缓存读取）中读取，以读取"),s("code",[t._v("变量的相对新值")]),t._v("。")]),t._v(" "),s("li",[t._v("因此, volatile变量不会被编译器分配到"),s("code",[t._v("寄存器")]),t._v("进行存储，对volatile变量的读写操作都是内存访问(访问高速缓存相当于主内存)操作。")])]),t._v(" "),s("p",[t._v("保证了")]),t._v(" "),s("ul",[s("li",[t._v("可见性")]),t._v(" "),s("li",[t._v("有序性")]),t._v(" "),s("li",[t._v("原子性：仅能保障"),s("code",[t._v("写volatile")]),t._v("变量操作的原子性，但没有锁的排他性，所以不会引起"),s("code",[t._v("上下文切换")]),t._v("（因为变量在主内存）")])]),t._v(" "),s("h3",{attrs:{id:"作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),s("ul",[s("li",[t._v("可见性")]),t._v(" "),s("li",[t._v("有序性")]),t._v(" "),s("li",[t._v("保障long/double型变量的"),s("code",[t._v("读写操作")]),t._v("的原子性")])]),t._v(" "),s("p",[t._v("当有“中间结果”进行操作，比如使用共享变量count2的赋值操作")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncount1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" count2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("该赋值操作为"),s("code",[t._v("read-modify-write")]),t._v("操作，在执行过程可能有其他线程更新了"),s("code",[t._v("count2")]),t._v("的值，但如果"),s("code",[t._v("count2")]),t._v("是"),s("code",[t._v("局部变量")]),t._v("那么整个就是"),s("code",[t._v("原子性")]),t._v("的。")]),t._v(" "),s("p",[t._v("volatile仅仅保障对其修饰的变量的写操作(以及读操作)本身的原子性，如果赋值操作的是局部变量，那么也认为是"),s("code",[t._v("原子性")]),t._v("的。")]),t._v(" "),s("ul",[s("li",[t._v("写线程对 volatile变量的写操作会产生类似于释放锁的效果。")]),t._v(" "),s("li",[t._v("读线程对 volatile变量的读操作会产生类似于获得锁的效果。")])]),t._v(" "),s("p",[t._v("因此, volatile具有保障有性和可见性的作用")]),t._v(" "),s("h3",{attrs:{id:"存储屏障-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储屏障-2"}},[t._v("#")]),t._v(" 存储屏障")]),t._v(" "),s("h4",{attrs:{id:"写操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#写操作"}},[t._v("#")]),t._v(" 写操作")]),t._v(" "),s("ul",[s("li",[t._v("该操作"),s("code",[t._v("之前")]),t._v("插入一个"),s("code",[t._v("释放屏障")])]),t._v(" "),s("li",[t._v("在该操作"),s("code",[t._v("之后")]),t._v("插入一个"),s("code",[t._v("存储屏障")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/volatile插入屏障.png",alt:"volatile写操作屏障.png",loading:"lazy"}})]),t._v(" "),s("p",[t._v("其中,"),s("code",[t._v("释放屏障")]),t._v("禁止了 volatile写操作与该操作之前的仼何读、写操作进行重排序 从而保证了 volatile写操作之前的任何读、写操作会先于 volatile写操作被提交,即其他线 程看到写线程对 volatile变量的更新时,写线程在更新 volatile变量之前所执行的内存操作 的结果对于读线程必然也是可见的。这就保障了读线程对写线程在更新 volatile变量前对 共享变量所执行的更新操作的感知顺序与相应的源代码顺序一致,即保障了有序性。")]),t._v(" "),s("p",[t._v("volatileε虽然能够保障有序性,但是它不像锁那样具备排他性,所以并不能保障其他操作的原子性,而"),s("code",[t._v("只能够保障对被修饰变量的写操作的原子性")]),t._v("。因此, volatile变量写操作之前的操作如果涉及共享可变变量,那么竞态仍可能产生。这是因为共享变量被赋值给volatile变量的时候其他线程可能已经更新了该共享变量的值。")]),t._v(" "),s("h4",{attrs:{id:"读操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读操作"}},[t._v("#")]),t._v(" 读操作")]),t._v(" "),s("ul",[s("li",[t._v("该操作"),s("code",[t._v("之前")]),t._v("插入一个"),s("code",[t._v("加载屏障")])]),t._v(" "),s("li",[t._v("在该操作"),s("code",[t._v("之后")]),t._v("插入一个"),s("code",[t._v("获取屏障")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/volatile读操作屏障.png",alt:"volatile读操作屏障",loading:"lazy"}})]),t._v(" "),s("p",[t._v("综上所述")]),t._v(" "),s("ul",[s("li",[t._v("写 volatile变量操作与该操作之前的任何读、写操作不会被重排序")]),t._v(" "),s("li",[t._v("读 volatile变量操作与该操作之后的任何读、写操作不会被重排序。")])]),t._v(" "),s("p",[t._v("volatile关键字的作用体现在对修饰变量的读写操作上。")]),t._v(" "),s("h3",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("p",[t._v("如果被修饰的变量是个数组,那么 volatile关键字只能够对"),s("code",[t._v("数组引用本")]),t._v("身的操作(读 取数组引用和更新数组引用)起作用，而无法对"),s("code",[t._v("数组元素的操作(读取、更新数组元素)")]),t._v(" 起作用。")]),t._v(" "),s("p",[t._v("对数组的操作可分为读取数组元素、写数组元素和读取数组引用这几种类型")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("inti"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" anArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//操作类型①:读取数组元素")]),t._v("\n\naRray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//操作类型②:写数组元素")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" anotherArray"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" anArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//操作类型③:读取数组引用")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("仅能保证第一个操作读取到的引用内存地址是最新的，但不能保证操作二读取到的数组元素是最新的。")]),t._v(" "),s("p",[t._v("如果要保证数组的读取元素也是最新的，可以用"),s("code",[t._v("AtomicIntegerArray")]),t._v("等")]),t._v(" "),s("h3",{attrs:{id:"开销"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开销"}},[t._v("#")]),t._v(" 开销")]),t._v(" "),s("ul",[s("li",[t._v("写：介于普通写取和临界区写之间，不用申请锁和上下文切换")]),t._v(" "),s("li",[t._v("读：介于普通写取和临界区写之间，需要从主内存中读取")])]),t._v(" "),s("h3",{attrs:{id:"适用场景-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景-2"}},[t._v("#")]),t._v(" 适用场景")]),t._v(" "),s("p",[t._v("条件")]),t._v(" "),s("ul",[s("li",[t._v("对变量的写操作不依赖于当前值。")]),t._v(" "),s("li",[t._v("该变量没有包含在具有其他变量的不变式中")])]),t._v(" "),s("blockquote",[s("p",[t._v("volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。 对于"),s("code",[t._v("引用型变量")]),t._v("和"),s("code",[t._v("数组变量")]),t._v(", volatile关键字并不能保证读线程能够读取到相应对象的 字段(实例变量、静态变量)、元素的相对新值。")])]),t._v(" "),s("p",[t._v("场景")]),t._v(" "),s("ul",[s("li",[t._v("状态标志：不用申请锁，且同步")]),t._v(" "),s("li",[t._v("保证可见性：其他线程能在不加锁的情况下看到变量的更新")]),t._v(" "),s("li",[t._v("替代锁：对volatile变量的写操作是原子性的，比较适合多线程共享"),s("code",[t._v("一个")]),t._v("状态变量而不是多线程共享"),s("code",[t._v("一组")]),t._v("变量。某些情形下,我们可以将多个线程共享的一组状态变量合并成一个对象,用个 volatile变量来引用该对象,从而使我们不必要使用锁。")]),t._v(" "),s("li",[t._v("简易的读写锁：在该场景中,读写锁是通过混合使用 锁和 volatile变量而实现的,其中锁用于保障共享变量写操作的原子性, volatile 变量用于保障共享变量的可见性。因此,与 Reentrantread writelock所实现的读 写锁不同的是,这种简易版读写锁仅涉及一个共享变量并且允许一个线程读取这 个共享变量时其他线程可以更新该变量(这是因为读线程并没有加锁)。因此 这种读写锁允许读线程可以读取到共享变量的非最新值。该场景的一个典型例子 是实现一个计数器,如清单3-7所示3。")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Counter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vaule")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h2",{attrs:{id:"cas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas"}},[t._v("#")]),t._v(" CAS")]),t._v(" "),s("p",[t._v("参考")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("https://blog.csdn.net/v123411739/article/details/79561458")]),t._v(" "),s("li",[t._v("https://www.jianshu.com/p/ab2c8fce878b")])])]),t._v(" "),s("h3",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[s("code",[t._v("CAS（Compare-and-Swap）")]),t._v("，即比较并替换，是一种实现并发算法时常用到的技术，Java并发包中的很多类都使用了"),s("code",[t._v("CAS")]),t._v("技术。CAS是一种"),s("code",[t._v("无锁算法")]),t._v("，CAS有3个操作数")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("内存值V")]),t._v(" "),s("li",[t._v("旧的预期值A")]),t._v(" "),s("li",[t._v("要修改的新值B")])])]),t._v(" "),s("p",[t._v("当且仅当"),s("code",[t._v("预期值A")]),t._v("和"),s("code",[t._v("内存值V")]),t._v("相同时(说明此时内存中的值没有被其他线程改变)，将"),s("code",[t._v("内存值V")]),t._v("修改为"),s("code",[t._v("B")]),t._v("，否则什么都不做。")]),t._v(" "),s("p",[t._v("CAS比较与交换的伪代码可以表示为：")]),t._v(" "),s("blockquote",[s("p",[t._v("do{")]),t._v(" "),s("p",[t._v("备份旧数据；")]),t._v(" "),s("p",[t._v("基于旧数据构造新数据；")]),t._v(" "),s("p",[t._v("}while(!CAS( 内存地址，备份的旧数据，新数据 ))")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/CAS_algorithm.jpg",alt:"CAS算法理解",loading:"lazy"}})]),t._v(" "),s("p",[t._v("参考"),s("code",[t._v("getAndAddInt")]),t._v("方法源码")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndAddInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" var4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" var5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            var5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIntVolatile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSwapInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" var4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" var5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("注：t1，t2线程是同时更新"),s("code",[t._v("同一变量56的值")])]),t._v(" "),s("p",[t._v("因为t1和t2线程都同时去访问"),s("code",[t._v("同一变量56")]),t._v("，所以他们会把"),s("strong",[t._v("主内存的值完全拷贝一份到自己的工作内存空间")]),t._v("，所以t1和t2线程的预期值都为"),s("code",[t._v("56")]),t._v("。")]),t._v(" "),s("p",[t._v("假设t1在与t2线程竞争中线程t1能去更新变量的值，而其他线程都失败。（失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次发起尝试）。t1线程去更新变量值改为57，然后写到内存中。此时对于t2来说，内存值变为了57，与预期值56不一致，就操作失败了（想改的值不再是原来的值）。")]),t._v(" "),s("p",[t._v("（上图通俗的解释是：CPU去更新一个值，但如果想改的值不再是原来的值，操作就失败，因为很明显，有其它操作先改变了这个值。）")]),t._v(" "),s("p",[t._v("就是指当两者进行比较时")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("如果相等，则证明共享数据没有被修改，替换成新值，然后继续往下运行；")]),t._v(" "),s("li",[t._v("如果不相等，说明共享数据已经被修改，放弃已经所做的操作，然后重新执行刚才的操作。")])])]),t._v(" "),s("p",[t._v("容易看出 CAS 操作是基于共享数据不会被修改的假设，采用了类似于数据库的"),s("code",[t._v("commit-retry")]),t._v(" 的模式。当同步冲突出现的机会很少时，这种假设能带来较大的性能提升。")]),t._v(" "),s("h3",{attrs:{id:"使用例子-源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用例子-源码"}},[t._v("#")]),t._v(" 使用例子/源码")]),t._v(" "),s("p",[t._v("创建一个"),s("code",[t._v("AtomicInteger")]),t._v("类型来测试多线程多同一个变量的自增操作")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),t._v(" race "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*race++;并非原子操作，经过下面三个步骤，取值，+1，写值*/")]),t._v("\n        race"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndIncrement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("getAndIncrement()源码")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndIncrement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndAddInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" valueOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("getAndAddInt源码")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndAddInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" var4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" var5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            var5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIntVolatile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSwapInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" var4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" var5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("可以看到最后底层调用的是"),s("code",[t._v("compareAndSwapInt()")]),t._v("，如果 CAS 失败，会一直进行尝试")]),t._v(" "),s("h3",{attrs:{id:"cas缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas缺点"}},[t._v("#")]),t._v(" CAS缺点")]),t._v(" "),s("p",[t._v("CAS虽然很高效的解决了原子操作问题，但是CAS仍然存在三大问题。")]),t._v(" "),s("div",{staticClass:"custom-block info"},[s("p",{staticClass:"custom-block-title"},[t._v("CAS缺点")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("循环时间长开销很大")]),t._v("：CAS 通常是配合无限循环一起使用的，我们可以看到 "),s("code",[t._v("getAndAddInt")]),t._v(" 方法执行时，如果 CAS 失败，会一直进行尝试。如果 CAS 长时间一直不成功，可能会给 CPU 带来很大的开销。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("只能保证一个变量的原子操作")]),t._v("：当对一个变量执行操作时，我们可以使用"),s("code",[t._v("循环 CAS")]),t._v(" 的方式来保证原子操作，但是对"),s("code",[t._v("多个变量")]),t._v("操作时，CAS 目前无法直接保证操作的原子性。但是我们可以通过以下两种办法来解决：1）使用互斥锁来保证原子性；2）将多个变量封装成对象，通过 "),s("code",[t._v("AtomicReference")]),t._v(" 来保证原子性。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ABA问题")]),t._v("：CAS 的使用流程通常如下：1）首先从地址 V 读取值 A；2）根据 A 计算目标值 B；3）通过 CAS 以原子的方式将地址 V 中的值从 A 修改为 B。")]),t._v(" "),s("p",[t._v("但是在第1步中读取的值是A，并且在第3步修改成功了，我们就能说它的值在第1步和第3步之间没有被其他线程改变过了吗?")]),t._v(" "),s("p",[s("strong",[t._v("如果在这段期间它的值曾经被改成了B，后来又被改回为A")]),t._v("，那CAS操作就会误认为它从来没有被改变过。这个漏洞称为CAS操作的“ABA”问题。Java并发包为了解决这个问题，提供了一个带有标记的原子引用类“"),s("code",[t._v("AtomicStampedReference")]),t._v("”，它可以通过控制"),s("code",[t._v("变量值的版本")]),t._v("来保证CAS的正确性。")]),t._v(" "),s("p",[t._v("因此，在使用CAS前要考虑清楚“ABA”问题是否会影响"),s("code",[t._v("程序并发的正确性")]),t._v("，如果需要解决ABA问题，改用"),s("code",[t._v("传统的互斥同步")]),t._v("可能会比原子类更高效。")])])])]),t._v(" "),s("h3",{attrs:{id:"cas在jdk中的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas在jdk中的应用"}},[t._v("#")]),t._v(" CAS在JDK中的应用")]),t._v(" "),s("p",[t._v("在原子类变量中，如"),s("code",[t._v("java.util.concurrent.atomic")]),t._v("中的"),s("code",[t._v("AtomicXXX")]),t._v("，都使用了这些底层的JVM支持为数字类型的引用类型提供一种高效的CAS操作，而在"),s("code",[t._v("java.util.concurrent")]),t._v("中的大多数类在实现时都直接或间接的使用了这些原子变量类。")]),t._v(" "),s("p",[t._v("Java 1.8中"),s("code",[t._v("AtomicInteger.incrementAndGet()")]),t._v("的实现源码为：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("incrementAndGet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndAddInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" valueOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndAddInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" var4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" var5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            var5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIntVolatile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSwapInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" var4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" var5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("由此可见，"),s("code",[t._v("AtomicInteger.incrementAndGet")]),t._v("的实现用了"),s("code",[t._v("乐观锁")]),t._v("技术，调用了类"),s("code",[t._v("sun.misc.Unsafe")]),t._v("库里面的 "),s("code",[t._v("CAS")]),t._v("算法，用"),s("code",[t._v("CPU指令")]),t._v("来实现"),s("code",[t._v("无锁自增")]),t._v("。所以，"),s("code",[t._v("AtomicInteger.incrementAndGet")]),t._v("的自增比用"),s("code",[t._v("synchronized")]),t._v("的锁效率倍增。")]),t._v(" "),s("h2",{attrs:{id:"原子变量-atomic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子变量-atomic"}},[t._v("#")]),t._v(" 原子变量（Atomic）")]),t._v(" "),s("p",[t._v("原子变量类( Atomics)是基于CAS实现的能够保障对共享变量进行read- modify- write 更新操作的原子性和可见性的一组工具类。这里所谓的read- modify- write更新操作,是指 对共享变量的更新不是一个简单的赋值操作,而是变量的新值依赖于变量的旧值,例如自 增操作“ count-+”。由于 volatile无法保障自增操作的原子性,而原子变量类的内部实现通 常借助一个 volatile变量并保障对该变量的read- modify-wite更新操作的原子性,因此它可以 被看作"),s("code",[t._v("增强型的 volatile变量")]),t._v("。原子变量类一共有12个,可以被分为4组。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/原子变量类.png",alt:"image-20211113154800436",loading:"lazy"}})]),t._v(" "),s("ul",[s("li",[t._v("字段更新器：解决ABA问题，"),s("a",{attrs:{href:"https://www.cnblogs.com/54chensongxia/p/12167772.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("引用型：主要针对引用的对象是否是原来的")])]),t._v(" "),s("h3",{attrs:{id:"atomiclong常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#atomiclong常用方法"}},[t._v("#")]),t._v(" AtomicLong常用方法")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/AtomicLong常用方法.png",alt:"image-20211113155240337",loading:"lazy"}})]),t._v(" "),s("h3",{attrs:{id:"字段更新器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字段更新器"}},[t._v("#")]),t._v(" 字段更新器")]),t._v(" "),s("p",[t._v("原子类型字段更新器在内部通过Unsafe类的native方法保证操作的原子性。")]),t._v(" "),s("p",[t._v("关于原子类型字段更新器的使用需要注意以下几个方面：")]),t._v(" "),s("ul",[s("li",[t._v("字段必须是volatile类型的，用于保证可见性。")]),t._v(" "),s("li",[t._v("字段和字段更新器的访问类型(public/protected/private)必须一致。")]),t._v(" "),s("li",[t._v("字段只能是实例变量，不能是类变量(static)。")]),t._v(" "),s("li",[t._v("字段不能是final的变量，这样的字段不可修改。")]),t._v(" "),s("li",[t._v("如果要处理Integer和Long类型，则需要使用AtomicReferenceFieldUpdater")])]),t._v(" "),s("h3",{attrs:{id:"set和lazyset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set和lazyset"}},[t._v("#")]),t._v(" set和lazySet")]),t._v(" "),s("p",[t._v("参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://blog.csdn.net/szhlcy/article/details/102561224?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link",target:"_blank",rel:"noopener noreferrer"}},[t._v("lazySet"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("普通Atomic下的set保证了原子性和可见性，而lazySet只保证了原子性不保证可见性，目的是在有些情况下减少内存屏障所需要优化性能，底层只是简单地对变量普通写。")]),t._v(" "),s("p",[t._v("set方法的设置操作在写操作的前后都加了内存屏障，因为AtomicInteger中的value是volatile修饰的，具体可以看前面的一篇博文Java并发volatile关键字的作用和汇编原理。而lazySet方法并不是直接的操作value字段，而是通过Unsafe类的putOrderedInt方法先通过初始化时候计算出的vlaue字段的偏移变量找到字段地址，然后调用本地方法进行操作的，在本地方法中只在写操作前面加了一个屏障，而后面没有加。")]),t._v(" "),s("h2",{attrs:{id:"对象的发布和逸出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的发布和逸出"}},[t._v("#")]),t._v(" 对象的发布和逸出")]),t._v(" "),s("h2",{attrs:{id:"java线程同步机制总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java线程同步机制总结"}},[t._v("#")]),t._v(" Java线程同步机制总结")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-1300186248.cos.ap-shanghai.myqcloud.com/Java-MultiThread-2/java线程同步机制总结.png",alt:"image-20211113202234366",loading:"lazy"}})]),t._v(" "),s("h2",{attrs:{id:"线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),s("h3",{attrs:{id:"线程池复用原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池复用原理"}},[t._v("#")]),t._v(" 线程池复用原理")]),t._v(" "),s("p",[t._v("在线程池中，线程会从 workQueue 中读取任务来执行，最小的执行单位就是 Worker，Worker 实现了 Runnable 接口，重写了 run 方法，这个 run 方法是让每个线程去执行一个循环，在这个循环代码中，去判断是否有任务待执行，若有则直接去执行这个任务，因此线程数不会增加。")])])}),[],!1,null,null,null);a.default=e.exports}}]);