(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{857:function(t,v,_){"use strict";_.r(v);var a=_(2),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("https://www.cnblogs.com/inception6-lxc/p/9073983.html")])])]),t._v(" "),_("h2",{attrs:{id:"进程和线程以及它们的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程以及它们的区别"}},[t._v("#")]),t._v(" 进程和线程以及它们的区别")]),t._v(" "),_("ul",[_("li",[t._v("进程是对运行时程序的封装，是系统进行资源调度和分配的的基本单位，实现了操作系统的并发；")]),t._v(" "),_("li",[t._v("线程是进程的子任务，是CPU调度和分派的基本单位，用于保证程序的 实时性，实现进程内部的并发；")]),t._v(" "),_("li",[t._v("一个程序至少有一个进程，一个进程至少有一个线程，线程依赖于进程而存在；")]),t._v(" "),_("li",[t._v("进程在执行过程中拥有独立的内存单元，而多个线程共享进程的内存。")])]),t._v(" "),_("p",[t._v("线程是进程划分成的更⼩的运⾏单位,⼀个进程在其执⾏的过程中可以产⽣多个线程。线程和进 程最⼤的不同在于基本上各进程是独⽴的，⽽各线程则不⼀定，因为同⼀进程中的线程极有可能会相互 影响。线程执⾏开销⼩，但不利于资源的管理和保护；⽽进程正相反")]),t._v(" "),_("h2",{attrs:{id:"进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),_("h3",{attrs:{id:"进程的状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程的状态"}},[t._v("#")]),t._v(" 进程的状态")]),t._v(" "),_("ul",[_("li",[t._v("创建状态(new) ：进程正在被创建，尚未到就绪状态。")]),t._v(" "),_("li",[t._v("就绪状态(ready) ：进程已处于准备运⾏状态，即进程获得了除了处理器之外的⼀切所需资源， ⼀旦得到处理器资源(处理器分配的时间⽚)即可运⾏。")]),t._v(" "),_("li",[t._v("运⾏状态(running) ：进程正在处理器上上运⾏(单核 CPU 下任意时刻只有⼀个进程处于运⾏状 态)。")]),t._v(" "),_("li",[t._v("阻塞状态(waiting) ：⼜称为等待状态，进程正在等待某⼀事件⽽暂停运⾏如等待某资源为可⽤ 或等待 IO 操作完成。即使处理器空闲，该进程也不能运⾏。")]),t._v(" "),_("li",[t._v("结束状态(terminated) ：进程正在从系统中消失。可能是进程正常结束或其他原因中断退出运 ⾏。")])]),t._v(" "),_("h3",{attrs:{id:"进程的七种通信方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程的七种通信方式"}},[t._v("#")]),t._v(" 进程的七种通信方式")]),t._v(" "),_("p",[t._v("参考")]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("https://www.jianshu.com/p/c1015f5ffa74")])])]),t._v(" "),_("ol",[_("li",[t._v("**管道/匿名管道(Pipes) ：**⽤于具有亲缘关系的⽗⼦进程间或者兄弟进程之间的通信。")]),t._v(" "),_("li",[_("strong",[t._v("有名管道(Names Pipes) :")]),t._v(" 匿名管道由于没有名字，只能⽤于亲缘关系的进程间通信。为了克服 这个缺点，提出了有名管道。有名管道严格遵循先进先出(first in first out)。有名管道以磁 盘⽂件的⽅式存在，可以实现本机任意两个进程通信。")]),t._v(" "),_("li",[t._v("**信号(Signal) ：**信号是⼀种⽐较复杂的通信⽅式，⽤于通知接收进程某个事件已经发⽣；")]),t._v(" "),_("li",[_("strong",[t._v("消息队列(Message Queuing) ："),_("strong",[t._v("消息队列是消息的链表,具有特定的格式,存放在内存中并由消息 队列标识符标识。管道和消息队列的通信数据都是先进先出")]),t._v("的")]),t._v("原则。与管道（⽆名管道：只存在 于内存中的⽂件；命名管道：存在于实际的磁盘介质或者⽂件系统）不同的是消息队列存放在内 核中，只有在内核重启(即，操作系统重启)或者显示地删除⼀个消息队列时，该消息队列才会被 真正的删除。消息队列可以实现消息的随机查询,消息不⼀定要以先进先出的次序读取,也可以按 消息的类型读取.⽐ FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载⽆格式 字 节流以及缓冲区⼤⼩受限等缺。")]),t._v(" "),_("li",[t._v("**信号量(Semaphores) ：**信号量是⼀个计数器，⽤于多进程对共享数据的访问，信号量的意图在 于进程间同步。这种通信⽅式主要⽤于解决与同步相关的问题并避免竞争条件。")]),t._v(" "),_("li",[t._v("**共享内存(Shared memory) ：**使得多个进程可以访问同⼀块内存空间，不同进程可以及时看到对 ⽅进程中对共享内存中数据的更新。这种⽅式需要依靠某种同步操作，如互斥锁和信号量等。可 以说这是最有⽤的进程间通信⽅式。")]),t._v(" "),_("li",[_("strong",[t._v("套接字(Sockets) :")]),t._v(" 此⽅法主要⽤于在客户端和服务器之间通过⽹络进⾏通信。套接字是⽀持 TCP/IP 的⽹络通信的基本操作单元，可以看做是不同主机之间的进程进⾏双向通信的端点，简 单的说就是通信的两⽅的⼀种约定，⽤套接字中的相关函数来完成通信过程。")])]),t._v(" "),_("h3",{attrs:{id:"进程的调度算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程的调度算法"}},[t._v("#")]),t._v(" 进程的调度算法")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("先到先服务(FCFS)调度算法 :")]),t._v(" 从就绪队列中选择⼀个最先进⼊该队列的进程为之分配资源，使 它⽴即执⾏并⼀直执⾏到完成或发⽣某事件⽽被阻塞放弃占⽤ CPU 时再重新调度。")]),t._v(" "),_("li",[_("strong",[t._v("短作业优先(SJF)的调度算法 :")]),t._v(" 从就绪队列中选出⼀个估计运⾏时间最短的进程为之分配资源， 使它⽴即执⾏并⼀直执⾏到完成或发⽣某事件⽽被阻塞放弃占⽤ CPU 时再重新调度。")]),t._v(" "),_("li",[_("strong",[t._v("时间⽚轮转调度算法 :")]),t._v(" 时间⽚轮转调度是⼀种最古⽼，最简单，最公平且使⽤最⼴的算法，⼜ 称 RR(Round robin)调度。每个进程被分配⼀个时间段，称作它的时间⽚，即该进程允许运⾏的 时间。")]),t._v(" "),_("li",[t._v("**多级反馈队列调度算法 ：**前⾯介绍的⼏种进程调度的算法都有⼀定的局限性。如短进程优先的 调度算法，仅照顾了短进程⽽忽略了⻓进程 。多级反馈队列调度算法既能使⾼优先级的作业得 到响应⼜能使短作业（进程）迅速完成。，因⽽它是⽬前被公认的⼀种较好的进程调度算法， UNIX 操作系统采取的便是这种调度算法。")]),t._v(" "),_("li",[_("strong",[t._v("优先级调度 ：")]),t._v(" 为每个流程分配优先级，⾸先执⾏具有最⾼优先级的进程，依此类推。具有相同 优先级的进程以 FCFS ⽅式执⾏。可以根据内存要求，时间要求或任何其他资源要求来确定优先 级。")])]),t._v(" "),_("h2",{attrs:{id:"线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[t._v("#")]),t._v(" 线程")]),t._v(" "),_("h3",{attrs:{id:"线程的状态-生命周期和状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程的状态-生命周期和状态"}},[t._v("#")]),t._v(" 线程的状态/⽣命周期和状态")]),t._v(" "),_("p",[_("img",{attrs:{src:"D:%5Crepository%5Cstatic-blog%5Csrc%5CInterview%5Cimages%5CComputer_other_interview_questions%5CThread_life-cycle.jpg",alt:"线程生命周期"}})]),t._v(" "),_("p",[t._v("线程在⽣命周期中并不是固定处于某⼀个状态⽽是随着代码的执⾏在不同状态之间切换。Java 线程状 态变迁如下图所示（图源《Java 并发编程艺术》4.1.4 节）：")]),t._v(" "),_("p",[_("img",{attrs:{src:"D:%5Crepository%5Cstatic-blog%5Csrc%5CInterview%5Cimages%5CComputer_other_interview_questions%5CThread_life-cycle_2.jpg",alt:"线程生命周期2"}})]),t._v(" "),_("p",[t._v("由上图可以看出：线程创建之后它将处于 NEW（新建） 状态，调⽤ start() ⽅法后开始运⾏，线程 这时候处于 READY（可运⾏） 状态。可运⾏状态的线程获得了 CPU 时间⽚（timeslice）后就处于 RUNNING（运⾏） 状态。")]),t._v(" "),_("p",[t._v("​\t\t当线程执⾏ "),_("strong",[t._v("wait()")]),t._v(" ⽅法之后，线程进⼊ "),_("strong",[t._v("WAITING（等待）")]),t._v(" 状态。进⼊等待状态的线程需要依靠其他 线程的通知才能够返回到运⾏状态，⽽ TIME_WAITING(超时等待) 状态相当于在等待状态的基础上增加 了超时限制，⽐如通过 sleep（long millis） ⽅法或 wait（long millis） ⽅法可以将 Java 线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。当线程调 ⽤同步⽅法时，在没有获取到锁的情况下，线程将会进⼊到 BLOCKED（阻塞） 状态。线程在执⾏ Runnable 的 run() ⽅法之后将会进⼊到 TERMINATED（终⽌） 状态。")]),t._v(" "),_("h3",{attrs:{id:"线程等待的两种方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程等待的两种方法"}},[t._v("#")]),t._v(" 线程等待的两种方法")]),t._v(" "),_("ul",[_("li",[t._v("sleep()")]),t._v(" "),_("li",[t._v("wait()")])]),t._v(" "),_("h4",{attrs:{id:"相同不同点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#相同不同点"}},[t._v("#")]),t._v(" 相同不同点")]),t._v(" "),_("p",[t._v("两者最主要的区别在于：sleep ⽅法没有释放锁，⽽ wait ⽅法释放了锁 。")]),t._v(" "),_("p",[t._v("两者都可以暂停线程的执⾏。 Wait 通常被⽤于线程间交互/通信，sleep 通常被⽤于暂停执⾏。")]),t._v(" "),_("p",[t._v("wait() ⽅法被调⽤后，线程不会⾃动苏醒，需要别的线程调⽤同⼀个对象上的 notify() 或者 notifyAll() ⽅法。")]),t._v(" "),_("p",[t._v("sleep() ⽅法执⾏完成后，线程会⾃动苏醒。或者可以使⽤ wait(long timeout)超时后线程会⾃动苏醒。")]),t._v(" "),_("h3",{attrs:{id:"线程间的同步的方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程间的同步的方式"}},[t._v("#")]),t._v(" 线程间的同步的⽅式")]),t._v(" "),_("p",[t._v("​\t\t线程同步是两个或多个共享关键资源的线程的并发执⾏。应该同步线程以避免关键的资源使 ⽤冲突。操作系统⼀般有下⾯三种线程同步的⽅式：")]),t._v(" "),_("ol",[_("li",[t._v("**互斥量(Mutex)：**采⽤互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为 互斥对象只有⼀个，所以可以保证公共资源不会被多个线程同时访问。⽐如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。")]),t._v(" "),_("li",[t._v("**信号量(Semphares) ：**它允许同⼀时刻多个线程访问同⼀资源，但是需要控制同⼀时刻访问此资 源的最⼤线程数量")]),t._v(" "),_("li",[t._v("**事件(Event) :Wait/Notify：**通过通知操作的⽅式来保持多线程同步，还可以⽅便的实现多线程 优先级的⽐᫾操")])])])}),[],!1,null,null,null);v.default=s.exports}}]);